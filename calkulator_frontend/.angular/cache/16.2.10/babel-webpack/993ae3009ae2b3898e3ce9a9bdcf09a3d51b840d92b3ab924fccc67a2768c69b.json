{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"@angular/common\";\nfunction MatrixComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n  }\n}\nexport class MatrixComponent {\n  constructor(fb, apiService) {\n    this.fb = fb;\n    this.apiService = apiService;\n    this.degree = 0;\n    this.n = 0;\n    this.coefitients = [1, 2, 3, 1, 1, 1, 1, 1, 1, 1];\n    this.ordinates = [4, 5, 1, 1, 1, 1, 1, 1, 1, 1];\n  }\n  ngOnInit() {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n    this.matrixForm = this.fb.group({\n      matrix: this.fb.array([])\n      // Uncomment and initialize ordinates if needed\n      // ordinates: this.fb.array([]),\n    });\n  }\n\n  addColumn() {}\n  addRow() {}\n  addOrdinate() {}\n  get matrixControls() {\n    return this.matrixForm.get('matrix').controls;\n  }\n  onSubmitEquationsDegree() {\n    console.log('degreeform is now - ', this.degreeForm.controls['degree'].value, ' <-');\n  }\n  onSubmit() {\n    const formData = this.matrixForm.getRawValue();\n    const payload = {\n      coefficients: this.coefitients,\n      ordinates: this.ordinates /*formData.ordinates*/\n    };\n\n    this.apiService.postMatrixData(payload).subscribe({\n      next: response => {\n        console.log('Response:', response);\n      },\n      error: error => console.error('Error Response:', error)\n    });\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 19,\n    vars: 4,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"name\", \"degree\"], [\"type\", \"number\", \"name\", \"degree\", \"placeholder\", \"number of equations\", 3, \"formControlName\"], [\"type\", \"submit\"], [\"formArrayName\", \"matrix\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [3, \"formGroupName\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Hello, here is the matrix form:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmitEquationsDegree();\n        });\n        i0.ɵɵelement(3, \"label\", 1)(4, \"input\", 2);\n        i0.ɵɵelementStart(5, \"button\", 3);\n        i0.ɵɵtext(6, \"Accept\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵtemplate(8, MatrixComponent_div_8_Template, 1, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_9_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(10, \"div\", 4);\n        i0.ɵɵelementStart(11, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_11_listener() {\n          return ctx.addColumn();\n        });\n        i0.ɵɵtext(12, \"Add Column\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_13_listener() {\n          return ctx.addRow();\n        });\n        i0.ɵɵtext(14, \"Add Row\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_15_listener() {\n          return ctx.addOrdinate();\n        });\n        i0.ɵɵtext(16, \"Add Ordinate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 3);\n        i0.ɵɵtext(18, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.degreeForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControlName\", ctx.degree);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.matrixControls);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.matrixForm);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelement","ɵɵproperty","i_r2","MatrixComponent","constructor","fb","apiService","degree","n","coefitients","ordinates","ngOnInit","degreeForm","group","required","matrixForm","matrix","array","addColumn","addRow","addOrdinate","matrixControls","get","controls","onSubmitEquationsDegree","console","log","value","onSubmit","formData","getRawValue","payload","coefficients","postMatrixData","subscribe","next","response","error","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","MatrixComponent_Template_form_ngSubmit_2_listener","ɵɵtemplate","MatrixComponent_div_8_Template","MatrixComponent_Template_form_ngSubmit_9_listener","MatrixComponent_Template_button_click_11_listener","MatrixComponent_Template_button_click_13_listener","MatrixComponent_Template_button_click_15_listener","ɵɵadvance"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl, Validators  } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n  matrixForm!: FormGroup;\n  degreeForm!: FormGroup;\n  degree:number=0; \n \n\n  constructor(private fb: FormBuilder, private apiService: ApiService) {\n    \n  }\n\n  n:number = 0  \n  ngOnInit(): void {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n  });\n\n  this.matrixForm = this.fb.group({\n      matrix: this.fb.array([]),\n      // Uncomment and initialize ordinates if needed\n      // ordinates: this.fb.array([]),\n  });\n    \n  }\n  coefitients=[1,2,3,1,1,1,1,1,1,1]\n  ordinates=  [4,5,1,1,1,1,1,1,1,1]\n  \n\n  \n  addColumn(){}\n  addRow(){}\n  addOrdinate(){}\n\n  get matrixControls() {\n    return (this.matrixForm.get('matrix') as FormArray).controls;\n}\n\n  onSubmitEquationsDegree() {\n    console.log('degreeform is now - ', this.degreeForm.controls['degree'].value, ' <-')\n  }\n  \n  onSubmit(): void {\n      \n      const formData = this.matrixForm.getRawValue();\n      const payload = {\n        coefficients: this.coefitients,   /* formData.matrix, */\n        ordinates:  this.ordinates     /*formData.ordinates*/\n      };\n      \n      this.apiService.postMatrixData(payload).subscribe({\n\n      \n        next: response => {\n          console.log('Response:', response)\n        },\n        error: error => console.error('Error Response:', error)\n      });\n\n     \n    }\n\n  }\n\n  ","<p>Hello, here is the matrix form:</p>\n<form  [formGroup] = \"degreeForm\" (ngSubmit)=\"onSubmitEquationsDegree()\">\n    <label name= \"degree\"></label>\n    <input type=\"number\" [formControlName] = \"degree\" name=\"degree\" placeholder=\"number of equations\">\n    <button type=\"submit\" >Accept</button>\n</form>\n\n<div formArrayName=\"matrix\">\n    <div *ngFor=\"let row of matrixControls; let i = index\" [formGroupName]=\"i\">\n        <!-- Your input fields for each row go here -->\n    </div>\n</div>\n\n\n<form [formGroup]=\"matrixForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- Matrix fields -->\n    <div formArrayName=\"matrix\">\n      <!-- Existing matrix rows and columns -->\n    </div>\n    <button type=\"button\" (click)=\"addColumn()\">Add Column</button>\n    <button type=\"button\" (click)=\"addRow()\">Add Row</button>\n  \n    <!-- Ordinates fields -->\n    <!-- <div formArrayName=\"ordinates\">\n        <div *ngFor=\"let ordinate of ordinatesControls; let i=index\">\n            <input type=\"number\" [formControlName]=\"i\">\n          </div>\n    </div> -->\n    <button type=\"button\" (click)=\"addOrdinate()\">Add Ordinate</button>\n  \n    <!-- Submit button -->\n    <button type=\"submit\">Submit</button>\n  </form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}