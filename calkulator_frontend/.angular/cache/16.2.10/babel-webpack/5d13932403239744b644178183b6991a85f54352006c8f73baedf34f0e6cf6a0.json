{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"@angular/common\";\nfunction MatrixComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const j_r5 = ctx.index;\n    const i_r2 = i0.ɵɵnextContext().index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", \"cell\" + i_r2 + \"_\" + j_r5);\n  }\n}\nfunction MatrixComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MatrixComponent_div_8_div_1_Template, 2, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.cols);\n  }\n}\nexport class MatrixComponent {\n  constructor(fb, fbuilder, formb, apiService) {\n    this.fb = fb;\n    this.fbuilder = fbuilder;\n    this.formb = formb;\n    this.apiService = apiService;\n    this.degree = 0;\n    this.rows = Array(4);\n    this.cols = Array(4);\n    this.profileForm = this.formb.group({\n      degree: ['']\n    });\n    this.matrixform = this.formb.group({\n      row: this.formb.array([])\n    });\n    this.n = 0;\n  }\n  ngOnInit() {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n    this.matrixForm = this.formb.group({});\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.matrixForm.addControl('cell' + i + '_' + j, new FormControl(''));\n      }\n    }\n  }\n  onSubmit1() {\n    const formData = this.profileForm.value;\n    this.apiService.postDegreeData(formData).subscribe({\n      next: response => console.log('Response:', response),\n      error: error => console.error('Error:', error)\n    });\n  }\n  submitMatrixForm() {\n    const matrixData = this.profileForm.value;\n    this.apiService.postMatrixData(matrixData).subscribe({\n      next: response => console.log('Response:', response),\n      error: error => console.error('Error:', error)\n    });\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"name\", \"degree\"], [\"type\", \"number\", \"formControlName\", \"degree\", \"name\", \"degree\", \"placeholder\", \"degree here\"], [3, \"formGroup\", \"ngSubmit\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [\"type\", \"number\", 3, \"formControlName\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Hello, here is the matrix form:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit1();\n        });\n        i0.ɵɵelement(3, \"label\", 1)(4, \"input\", 2);\n        i0.ɵɵelementStart(5, \"button\");\n        i0.ɵɵtext(6, \"Submit degree\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.submitMatrixForm();\n        });\n        i0.ɵɵtemplate(8, MatrixComponent_div_8_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵtext(10, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(11, \" < \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"p\");\n        i0.ɵɵtext(13, \"here is matrixForm\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.matrixForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.rows);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormControl","Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","i_r2","j_r5","ɵɵtemplate","MatrixComponent_div_8_div_1_Template","ctx_r0","cols","MatrixComponent","constructor","fb","fbuilder","formb","apiService","degree","rows","Array","profileForm","group","matrixform","row","array","n","ngOnInit","degreeForm","required","matrixForm","i","j","addControl","onSubmit1","formData","value","postDegreeData","subscribe","next","response","console","log","error","submitMatrixForm","matrixData","postMatrixData","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","ɵɵtext","ɵɵlistener","MatrixComponent_Template_form_ngSubmit_2_listener","MatrixComponent_Template_form_ngSubmit_7_listener","MatrixComponent_div_8_Template"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl,  Validators } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n \n  degreeForm!: FormGroup;\n  degree:number=0; \n  \n  matrixForm: FormGroup;\n  rows = Array(4);\n  cols = Array(4);\n\n\n  profileForm = this.formb.group({\n    degree: [''],\n  });\n\n  matrixform: FormGroup = this.formb.group({\n    row: this.formb.array([])\n});\n\n  \n\n\n\n  constructor(private fb: FormBuilder, private fbuilder:FormBuilder,  private formb: FormBuilder, private apiService: ApiService) {\n    \n  }\n\n  n:number = 0  \n  ngOnInit(): void {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n\n    this.matrixForm = this.formb.group({});\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.matrixForm.addControl('cell' + i + '_' + j, new FormControl(''));\n      }\n    }\n\n  }\n  \n\n    onSubmit1(): void {\n      const formData = this.profileForm.value;\n      this.apiService.postDegreeData(formData).subscribe({\n        next:response => console.log('Response:', response),\n        error: error => console.error('Error:', error)\n      });\n    }\n\n    submitMatrixForm():void {\n      const matrixData = this.profileForm.value;\n      this.apiService.postMatrixData(matrixData).subscribe({\n        next: response => console.log('Response:', response),\n        error: error => console.error('Error:', error)\n      });\n    }\n\n\n}\n\n","<p>Hello, here is the matrix form:</p>\n<form  [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit1()\" novalidate>\n    <label name= \"degree\"></label>\n    <input type=\"number\" formControlName = \"degree\" name=\"degree\" placeholder=\"degree here\">\n    <button>Submit degree</button>\n</form>\n\n\n    <form [formGroup]=\"matrixForm\" (ngSubmit)=\"submitMatrixForm()\">\n        <div *ngFor=\"let row of rows; let i = index\">\n          <div *ngFor=\"let col of cols; let j = index\">\n            <input type=\"number\" [formControlName]=\"'cell' + i + '_' + j\">\n          </div>\n        </div>\n        <button type=\"submit\">Submit</button>\n      <\n  \n</form>\n\n\n<p>here is matrixForm</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}