{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nexport class MatrixComponent {\n  constructor(fb, apiService) {\n    this.fb = fb;\n    this.apiService = apiService;\n    this.degreeForm = new FormGroup({\n      degree: new FormControl('')\n    });\n    this.n = 0;\n    this.coefitients = [1, 2, 3, 1, 1, 1, 1, 1, 1, 1];\n    this.ordinates = [4, 5, 1, 1, 1, 1, 1, 1, 1, 1];\n  }\n  ngOnInit() {}\n  addColumn() {}\n  addRow() {}\n  addOrdinate() {}\n  onSubmitEquationsDegree() {\n    console.log('degreeform is now - ', this.degreeForm.get('degree'));\n  }\n  onSubmit() {\n    const formData = this.matrixForm.getRawValue();\n    const payload = {\n      coefficients: this.coefitients,\n      ordinates: this.ordinates /*formData.ordinates*/\n    };\n\n    this.apiService.postMatrixData(payload).subscribe({\n      next: response => {\n        console.log('Response:', response);\n      },\n      error: error => console.error('Error Response:', error)\n    });\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 17,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"name\", \"give n - equations_degree\"], [\"type\", \"number\", \"name\", \"degree\", \"placeholder\", \"number of equations\"], [\"type\", \"submit\"], [\"formArrayName\", \"matrix\"], [\"type\", \"button\", 3, \"click\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Hello, here is the matrix form:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmitEquationsDegree();\n        });\n        i0.ɵɵelement(3, \"label\", 1)(4, \"input\", 2);\n        i0.ɵɵelementStart(5, \"button\", 3);\n        i0.ɵɵtext(6, \"Accept\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(8, \"div\", 4);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_9_listener() {\n          return ctx.addColumn();\n        });\n        i0.ɵɵtext(10, \"Add Column\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_11_listener() {\n          return ctx.addRow();\n        });\n        i0.ɵɵtext(12, \"Add Row\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_13_listener() {\n          return ctx.addOrdinate();\n        });\n        i0.ɵɵtext(14, \"Add Ordinate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 3);\n        i0.ɵɵtext(16, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.degreeForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.matrixForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormArrayName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormGroup","FormControl","MatrixComponent","constructor","fb","apiService","degreeForm","degree","n","coefitients","ordinates","ngOnInit","addColumn","addRow","addOrdinate","onSubmitEquationsDegree","console","log","get","onSubmit","formData","matrixForm","getRawValue","payload","coefficients","postMatrixData","subscribe","next","response","error","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","MatrixComponent_Template_form_ngSubmit_2_listener","ɵɵelement","MatrixComponent_Template_form_ngSubmit_7_listener","MatrixComponent_Template_button_click_9_listener","MatrixComponent_Template_button_click_11_listener","MatrixComponent_Template_button_click_13_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl  } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n  matrixForm!: FormGroup;\n  \n  degreeForm = new FormGroup ({\n    degree: new FormControl('')\n  });\n\n  constructor(private fb: FormBuilder, private apiService: ApiService) {\n\n    \n  }\n  n:number = 0  \n  ngOnInit(): void {}\n  coefitients=[1,2,3,1,1,1,1,1,1,1]\n  ordinates=  [4,5,1,1,1,1,1,1,1,1]\n  \n\n  \n  addColumn(){}\n  addRow(){}\n  addOrdinate(){}\n\n  onSubmitEquationsDegree() {\n    console.log('degreeform is now - ', this.degreeForm.get('degree'))\n  }\n  \n  onSubmit(): void {\n      \n      const formData = this.matrixForm.getRawValue();\n      const payload = {\n        coefficients: this.coefitients,   /* formData.matrix, */\n        ordinates:  this.ordinates     /*formData.ordinates*/\n      };\n      \n    \n      this.apiService.postMatrixData(payload).subscribe({\n\n      \n        next: response => {\n          console.log('Response:', response)\n        },\n        error: error => console.error('Error Response:', error)\n      });\n    }\n\n  }\n\n  ","<p>Hello, here is the matrix form:</p>\n<form  [formGroup] = \"degreeForm\" (ngSubmit)=\"onSubmitEquationsDegree()\">\n    <label name= \"give n - equations_degree\"></label>\n    <input type=\"number\" name = \"degree\" placeholder=\"number of equations\">\n    <button type=\"submit\" >Accept</button>\n</form>\n<form [formGroup]=\"matrixForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- Matrix fields -->\n    <div formArrayName=\"matrix\">\n      <!-- Existing matrix rows and columns -->\n    </div>\n    <button type=\"button\" (click)=\"addColumn()\">Add Column</button>\n    <button type=\"button\" (click)=\"addRow()\">Add Row</button>\n  \n    <!-- Ordinates fields -->\n    <!-- <div formArrayName=\"ordinates\">\n        <div *ngFor=\"let ordinate of ordinatesControls; let i=index\">\n            <input type=\"number\" [formControlName]=\"i\">\n          </div>\n    </div> -->\n    <button type=\"button\" (click)=\"addOrdinate()\">Add Ordinate</button>\n  \n    <!-- Submit button -->\n    <button type=\"submit\">Submit</button>\n  </form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}