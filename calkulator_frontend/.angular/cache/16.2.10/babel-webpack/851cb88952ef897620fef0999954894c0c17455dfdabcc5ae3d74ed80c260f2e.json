{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"@angular/common\";\nfunction MatrixComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r2);\n  }\n}\nexport class MatrixComponent {\n  constructor(fb, formb, apiService) {\n    this.fb = fb;\n    this.formb = formb;\n    this.apiService = apiService;\n    this.degree = 0;\n    this.profileForm = this.formb.group({\n      degree: ['']\n    });\n    this.n = 0;\n    this.coefitients = [1, 2, 3, 1, 1, 1, 1, 1, 1, 1];\n    this.ordinates = [4, 5, 1, 1, 1, 1, 1, 1, 1, 1];\n  }\n  ngOnInit() {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n    this.matrixForm = this.fb.group({\n      matrix: this.fb.array([])\n      // Uncomment and initialize ordinates if needed\n      // ordinates: this.fb.array([]),\n    });\n  }\n\n  addColumn() {}\n  addRow() {}\n  addOrdinate() {}\n  get matrixControls() {\n    return this.matrixForm.get('matrix').controls;\n  }\n  onSubmitEquationsDegree() {\n    console.log('degreeform is now - ', this.degreeForm.controls['degree'].value, ' <-');\n  }\n  onSubmit() {\n    const formData = this.matrixForm.getRawValue();\n    const payload = {\n      coefficients: this.coefitients,\n      ordinates: this.ordinates /*formData.ordinates*/\n    };\n\n    this.apiService.postMatrixData(payload).subscribe({\n      next: response => {\n        console.log('Response:', response);\n      },\n      error: error => console.error('Error Response:', error)\n    });\n  }\n  onSubmit_degree() {\n    console.log('So fellows, degree is now - ', this.profileForm.controls['degree'].value);\n    const degree = this.profileForm.controls['degree'].value?.toString;\n    const payload = {\n      coefficients: formData.matrix,\n      ordinates: formData.ordinates\n    };\n    this.apiService.postMatrixData(payload).subscribe({\n      next: response => {\n        console.log('Response:', response);\n      },\n      error: error => console.error('Error Response:', error)\n    });\n  }\n  onSubmit1() {\n    const formData = this.profileForm.value;\n    this.apiService.postDegreeData(formData).subscribe(response => console.log('Response:', response), error => console.error('Error:', error));\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 19,\n    vars: 3,\n    consts: [[\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"name\", \"degree\"], [\"type\", \"number\", \"formControlName\", \"degree\", \"name\", \"degree\", \"placeholder\", \"degree here\"], [3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"matrix\"], [\"type\", \"button\", 3, \"click\"], [\"formArrayName\", \"ordinates\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [\"type\", \"number\", 3, \"formControlName\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Hello, here is the matrix form:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit1();\n        });\n        i0.ɵɵelement(3, \"label\", 1)(4, \"input\", 2);\n        i0.ɵɵelementStart(5, \"button\");\n        i0.ɵɵtext(6, \"Submit degree\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(8, \"div\", 4);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_9_listener() {\n          return ctx.addColumn();\n        });\n        i0.ɵɵtext(10, \"Add Column\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_11_listener() {\n          return ctx.addRow();\n        });\n        i0.ɵɵtext(12, \"Add Row\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 6);\n        i0.ɵɵtemplate(14, MatrixComponent_div_14_Template, 2, 1, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_15_listener() {\n          return ctx.addOrdinate();\n        });\n        i0.ɵɵtext(16, \"Add Ordinate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 8);\n        i0.ɵɵtext(18, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.matrixForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.ordinatesControls);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","i_r2","MatrixComponent","constructor","fb","formb","apiService","degree","profileForm","group","n","coefitients","ordinates","ngOnInit","degreeForm","required","matrixForm","matrix","array","addColumn","addRow","addOrdinate","matrixControls","get","controls","onSubmitEquationsDegree","console","log","value","onSubmit","formData","getRawValue","payload","coefficients","postMatrixData","subscribe","next","response","error","onSubmit_degree","toString","onSubmit1","postDegreeData","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","ɵɵtext","ɵɵlistener","MatrixComponent_Template_form_ngSubmit_2_listener","MatrixComponent_Template_form_ngSubmit_7_listener","MatrixComponent_Template_button_click_9_listener","MatrixComponent_Template_button_click_11_listener","ɵɵtemplate","MatrixComponent_div_14_Template","MatrixComponent_Template_button_click_15_listener","ordinatesControls"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl, Validators } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n  matrixForm!: FormGroup;\n  degreeForm!: FormGroup;\n  degree:number=0; \n\n  \n\n  profileForm = this.formb.group({\n    degree: [''],\n    \n  });\n\n  \n\n\n\n  constructor(private fb: FormBuilder,  private formb: FormBuilder, private apiService: ApiService) {\n    \n  }\n\n  n:number = 0  \n  ngOnInit(): void {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n  });\n\n  this.profileForm = this.fb.group({\n    degree: ['']\n  });\n\n  this.matrixForm = this.fb.group({\n      matrix: this.fb.array([]),\n      // Uncomment and initialize ordinates if needed\n      // ordinates: this.fb.array([]),\n  });\n    \n  }\n  coefitients=[1,2,3,1,1,1,1,1,1,1]\n  ordinates=  [4,5,1,1,1,1,1,1,1,1]\n  \n\n  \n  addColumn(){}\n  addRow(){}\n  addOrdinate(){}\n\n  get matrixControls() {\n    return (this.matrixForm.get('matrix') as FormArray).controls;\n}\n\n  onSubmitEquationsDegree() {\n    console.log('degreeform is now - ', this.degreeForm.controls['degree'].value, ' <-')\n  }\n  \n  onSubmit(): void {\n      \n      const formData = this.matrixForm.getRawValue();\n      const payload = {\n        coefficients: this.coefitients,   /* formData.matrix, */\n        ordinates:  this.ordinates     /*formData.ordinates*/\n      };\n      \n      this.apiService.postMatrixData(payload).subscribe({\n\n      \n        next: response => {\n          console.log('Response:', response)\n        },\n        error: error => console.error('Error Response:', error)\n      });\n\n     \n    }\n\n    onSubmit_degree() {\n      console.log('So fellows, degree is now - ', this.profileForm.controls['degree'].value)  \n      const degree = this.profileForm.controls['degree'].value?.toString\n      const payload = {\n        coefficients:  formData.matrix,\n        ordinates:  formData.ordinates\n      };\n      \n      this.apiService.postMatrixData(payload).subscribe({\n\n      \n        next: response => {\n          console.log('Response:', response)\n        },\n        error: error => console.error('Error Response:', error)\n      });\n    }\n\n    onSubmit1(): void {\n      const formData = this.profileForm.value;\n      this.apiService.postDegreeData(formData).subscribe(\n        response => console.log('Response:', response),\n        error => console.error('Error:', error)\n      );\n    }\n\n  }\n\n  ","<p>Hello, here is the matrix form:</p>\n<form  [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit1()\" novalidate>\n    <label name= \"degree\"></label>\n    <input type=\"number\" formControlName = \"degree\" name=\"degree\" placeholder=\"degree here\">\n    <button>Submit degree</button>\n</form>\n\n <!-- <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n    <input type=\"number\" formControlName = \"degree\" placeholder=\"degree here\">\n    <button type=\"submit\">Submit degree two</button>\n</form> -->\n\n<!-- <form  [formGroup] = \"degreeForm\" (ngSubmit)=\"onSubmitEquationsDegree()\">\n    <label name= \"degree\"></label>\n    <input type=\"number\" [formControlName] = \"degree\" name=\"degree\" placeholder=\"number of equations\">\n    <button type=\"submit\" >Accept</button>\n</form> -->\n\n<!-- <div formArrayName=\"matrix\">\n    <div *ngFor=\"let row of matrixControls; let i = index\" [formGroupName]=\"i\">\n       \n    </div>\n</div>  -->\n\n\n<form [formGroup]=\"matrixForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- Matrix fields -->\n    <div formArrayName=\"matrix\">\n      <!-- Existing matrix rows and columns -->\n    </div>\n    <button type=\"button\" (click)=\"addColumn()\">Add Column</button>\n    <button type=\"button\" (click)=\"addRow()\">Add Row</button>\n  \n    <!-- Ordinates fields -->\n    <div formArrayName=\"ordinates\">\n        <div *ngFor=\"let ordinate of ordinatesControls; let i=index\">\n            <input type=\"number\" [formControlName]=\"i\">\n          </div>\n    </div>\n    <button type=\"button\" (click)=\"addOrdinate()\">Add Ordinate</button>\n  \n    <!-- Submit button -->\n    <button type=\"submit\">Submit</button>\n  </form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}