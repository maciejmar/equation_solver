{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nexport let MatrixComponent = class MatrixComponent {\n  constructor(fb, fbuilder, formb, formbOrdinates, apiService) {\n    this.fb = fb;\n    this.fbuilder = fbuilder;\n    this.formb = formb;\n    this.formbOrdinates = formbOrdinates;\n    this.apiService = apiService;\n    this.degree = 0;\n    this.rows = Array(4);\n    this.cols = Array(4);\n    // ordinatesForm!: FormGroup;\n    this.profileForm = this.formb.group({\n      degree: ['']\n    });\n    this.matrixform = this.formb.group({\n      row: this.formb.array([])\n    });\n    this.ordinatesForm = this.formbOrdinates.group({\n      row: this.formbOrdinates.array([])\n    });\n    this.n = 0;\n  }\n  ngOnInit() {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n    this.matrixForm = this.formb.group({});\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const controlName = `cell${i}_${j}`;\n        this.matrixForm.addControl(controlName, new FormControl('', [Validators.required, Validators.pattern(/^\\d*\\.?\\d+$/) // Only numeric values alowed \n        ]));\n      }\n    }\n\n    this.ordinatesForm = this.formb.group({});\n    for (let i = 0; i < 4; i++) {\n      {\n        this.ordinatesForm.addControl('ordin' + i, new FormControl(''));\n      }\n    }\n  }\n  onSubmit1() {\n    const formData = this.profileForm.value;\n    this.apiService.postDegreeData(formData).subscribe({\n      next: response => console.log('ResponseDegree:', response),\n      error: error => console.error('Error:', error)\n    });\n  }\n  submitMatrixForm() {\n    const matrixData = this.matrixForm.value;\n    console.log(this.matrixForm.value);\n    if (this.matrixForm.valid) {\n      // Process the valid form data\n      this.apiService.postMatrixData(matrixData).subscribe({\n        next: response => console.log('ResponseMatrix:', response),\n        error: error => {\n          console.log('error in submiting matrix -', error);\n          this.matrixForm.setErrors({\n            'backend': error.error.error\n          });\n        }\n      });\n    } else {\n      // Optionally handle the invalid form state\n      console.log('Invalid matrix');\n    }\n  }\n  submitOrdinatesForm() {\n    const ordinatesData = this.ordinatesForm.value;\n    console.log(this.ordinatesForm.value);\n    this.apiService.postOrdinatesData(ordinatesData).subscribe({\n      next: response => console.log('ResponseOrdinates:', response),\n      error: error => console.error('Error:', error)\n    });\n  }\n};\nMatrixComponent = __decorate([Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})], MatrixComponent);","map":{"version":3,"names":["Component","FormControl","Validators","MatrixComponent","constructor","fb","fbuilder","formb","formbOrdinates","apiService","degree","rows","Array","cols","profileForm","group","matrixform","row","array","ordinatesForm","n","ngOnInit","degreeForm","required","matrixForm","i","j","controlName","addControl","pattern","onSubmit1","formData","value","postDegreeData","subscribe","next","response","console","log","error","submitMatrixForm","matrixData","valid","postMatrixData","setErrors","submitOrdinatesForm","ordinatesData","postOrdinatesData","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl,  Validators } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n \n  degreeForm!: FormGroup;\n  degree:number=0; \n  \n  matrixForm!: FormGroup;\n  rows = Array(4);\n  cols = Array(4);\n\n // ordinatesForm!: FormGroup;\n  \n  profileForm = this.formb.group({\n    degree: [''],\n  });\n\n  matrixform: FormGroup = this.formb.group({\n    row: this.formb.array([])\n});\n\n ordinatesForm: FormGroup = this.formbOrdinates.group({\n  row: this.formbOrdinates.array([])\n })\n\n\n\n  \n\n\n\n  constructor(private fb: FormBuilder, private fbuilder:FormBuilder,  private formb: FormBuilder, private formbOrdinates: FormBuilder,\n     private apiService: ApiService) {\n    \n  }\n\n  n:number = 0  \n  ngOnInit(): void {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n\n    this.matrixForm = this.formb.group({});\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n          const controlName = `cell${i}_${j}`;\n          this.matrixForm.addControl(controlName, new FormControl('', [\n              Validators.required,\n              Validators.pattern(/^\\d*\\.?\\d+$/) // Only numeric values alowed \n          ]));\n      }\n  }\n\n    this.ordinatesForm = this.formb.group({});\n    for (let i = 0; i < 4; i++) {\n      {\n        this.ordinatesForm.addControl('ordin' + i , new FormControl(''));\n      }\n    }\n\n  }\n  \n\n    onSubmit1(): void {\n      const formData = this.profileForm.value;\n      this.apiService.postDegreeData(formData).subscribe({\n        next:response => console.log('ResponseDegree:', response),\n        error: error => console.error('Error:', error)\n      });\n    }\n\n    submitMatrixForm():void {\n      const matrixData = this.matrixForm.value;\n      console.log(this.matrixForm.value);\n      if (this.matrixForm.valid) {\n        // Process the valid form data\n        this.apiService.postMatrixData(matrixData).subscribe({\n          next: response => console.log('ResponseMatrix:', response),\n          error: error => {\n            console.log('error in submiting matrix -', error);\n            this.matrixForm.setErrors({ 'backend': error.error.error });\n          }\n      });\n    } else {\n        // Optionally handle the invalid form state\n        console.log('Invalid matrix');\n    }\n      \n    \n    }\n    submitOrdinatesForm():void {\n      const ordinatesData = this.ordinatesForm.value;\n      console.log(this.ordinatesForm.value);\n      this.apiService.postOrdinatesData(ordinatesData).subscribe({\n        next: response => console.log('ResponseOrdinates:', response),\n        error: error => console.error('Error:', error)\n      })\n\n    }\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}