{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"@angular/common\";\nfunction MatrixComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r2);\n  }\n}\nexport class MatrixComponent {\n  constructor(fb, apiService) {\n    this.fb = fb;\n    this.apiService = apiService;\n  }\n  ngOnInit() {\n    this.matrixForm = this.fb.group({\n      matrix: this.fb.array([this.initRow()]),\n      ordinates: this.fb.array([this.fb.control(0)]) // Add this line\n    });\n  }\n\n  initRow() {\n    console.log('init of rows');\n    return this.fb.array([this.initColumn()]);\n  }\n  initColumn() {\n    return this.fb.control(0);\n  }\n  get matrix() {\n    return this.matrixForm.get('matrix');\n  }\n  // Safe type casting to FormArray\n  getControls(formArray) {\n    return formArray.controls;\n  }\n  addRow() {\n    this.matrix.push(this.initRow());\n  }\n  addColumn() {\n    this.matrix.controls.forEach(row => row.push(this.initColumn()));\n  }\n  addOrdinate() {\n    this.matrixForm.get('ordinates').push(this.fb.control(0));\n  }\n  // Send data to your service\n  // onSubmit(): void {\n  //   console.log('Matrix Values:', this.matrixForm.value);\n  //   console.log('hey this is onsubmit');\n  //   this.apiService.postMatrixData(this.matrixForm.value).subscribe(\n  //     {\n  //       next: response =>  {\n  //           console.log('Response from server:', response);\n  //       },\n  //       error: error => console.log(error)\n  //     });   \n  //   }\n  onSubmit() {\n    const formData = this.matrixForm.getRawValue();\n    const payload = {\n      coefficients: formData.matrix,\n      ordinates: formData.ordinates\n    };\n    this.apiService.postMatrixData(payload).subscribe({\n      next: response => {\n        console.log('Response:', response);\n      },\n      error: error => console.error('Error Response:', error)\n    });\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 14,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"matrix\"], [\"type\", \"button\", 3, \"click\"], [\"formArrayName\", \"ordinates\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [\"type\", \"number\", 3, \"formControlName\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Hello, here is the matrix form:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(3, \"div\", 1);\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_4_listener() {\n          return ctx.addColumn();\n        });\n        i0.ɵɵtext(5, \"Add Column\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_6_listener() {\n          return ctx.addRow();\n        });\n        i0.ɵɵtext(7, \"Add Row\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 3);\n        i0.ɵɵtemplate(9, MatrixComponent_div_9_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_10_listener() {\n          return ctx.addOrdinate();\n        });\n        i0.ɵɵtext(11, \"Add Ordinate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 5);\n        i0.ɵɵtext(13, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.matrixForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", (tmp_1_0 = ctx.matrixForm.get(\"ordinates\")) == null ? null : tmp_1_0.controls);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","i_r2","MatrixComponent","constructor","fb","apiService","ngOnInit","matrixForm","group","matrix","array","initRow","ordinates","control","console","log","initColumn","get","getControls","formArray","controls","addRow","push","addColumn","forEach","row","addOrdinate","onSubmit","formData","getRawValue","payload","coefficients","postMatrixData","subscribe","next","response","error","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","ɵɵtext","ɵɵlistener","MatrixComponent_Template_form_ngSubmit_2_listener","MatrixComponent_Template_button_click_4_listener","MatrixComponent_Template_button_click_6_listener","ɵɵtemplate","MatrixComponent_div_9_Template","MatrixComponent_Template_button_click_10_listener","tmp_1_0"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl  } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n  matrixForm!: FormGroup;\n\n  constructor(private fb: FormBuilder, private apiService: ApiService) {}\n\n\n \n\n  ngOnInit() {\n    this.matrixForm = this.fb.group({\n      matrix: this.fb.array([this.initRow()]),\n      ordinates: this.fb.array([this.fb.control(0)])  // Add this line\n    });\n  }\n\n  initRow(): FormArray {\n    console.log('init of rows');\n    return this.fb.array([this.initColumn()]);\n    \n  }\n\n  initColumn(): FormControl {\n    return this.fb.control(0);\n  }\n\n  get matrix(): FormArray {\n    return this.matrixForm.get('matrix') as FormArray;\n  }\n\n  // Safe type casting to FormArray\n  getControls(formArray: AbstractControl): AbstractControl[] {\n    return (formArray as FormArray).controls;\n  }\n\n  addRow(): void {\n    this.matrix.push(this.initRow());\n  }\n\n  addColumn(): void {\n    this.matrix.controls.forEach(row => (row as FormArray).push(this.initColumn()));\n  }\n\n  addOrdinate(): void {\n    (this.matrixForm.get('ordinates') as FormArray).push(this.fb.control(0));\n  }\n\n\n    // Send data to your service\n  \n\n  // onSubmit(): void {\n  //   console.log('Matrix Values:', this.matrixForm.value);\n  //   console.log('hey this is onsubmit');\n  //   this.apiService.postMatrixData(this.matrixForm.value).subscribe(\n  //     {\n  //       next: response =>  {\n  //           console.log('Response from server:', response);\n  //       },\n  //       error: error => console.log(error)\n  //     });   \n  //   }\n\n    onSubmit(): void {\n      \n      const formData = this.matrixForm.getRawValue();\n      const payload = {\n        coefficients: formData.matrix,\n        ordinates: formData.ordinates\n      };\n      \n    \n      this.apiService.postMatrixData(payload).subscribe({\n\n      \n        next: response => {\n          console.log('Response:', response)\n        },\n        error: error => console.error('Error Response:', error)\n      }\n    );\n    }\n\n  }\n\n  ","<p>Hello, here is the matrix form:</p>\n<form [formGroup]=\"matrixForm\" (ngSubmit)=\"onSubmit()\">\n    <!-- Matrix fields -->\n    <div formArrayName=\"matrix\">\n      <!-- Existing matrix rows and columns -->\n    </div>\n    <button type=\"button\" (click)=\"addColumn()\">Add Column</button>\n    <button type=\"button\" (click)=\"addRow()\">Add Row</button>\n  \n    <!-- Ordinates fields -->\n    <div formArrayName=\"ordinates\">\n      <div *ngFor=\"let ordinate of matrixForm.get('ordinates')?.controls; let i=index\">\n        <input type=\"number\" [formControlName]=\"i\">\n      </div>\n    </div>\n    <button type=\"button\" (click)=\"addOrdinate()\">Add Ordinate</button>\n  \n    <!-- Submit button -->\n    <button type=\"submit\">Submit</button>\n  </form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}