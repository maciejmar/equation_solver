{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.csrfToken = null;\n    this.apiUrl = environment.apiUrl;\n    this.apiAnotherUrl = environment.apiAnotherUrl;\n    this.apiOrdinatesUrl = environment.apiOrdinatesUrl;\n    this.apiCsrfUrl = environment.apiCsrfUrl;\n  }\n  //retrive CSRF token\n  fetchCsrfToken() {\n    if (this.csrfToken) {\n      console.log('by fetching csrf token is - ', this.csrfToken);\n      return of(this.csrfToken); // 'of' is from rxjs\n    } else {\n      // Ensure this URL is correct and points to your Django endpoint for CSRF token retrieval\n      return this.http.get(`${environment.apiCsrfUrl}csrf/`, {\n        responseType: 'text'\n      }).pipe(map(response => {\n        this.csrfToken = JSON.parse(response.csrfToken);\n        const token = JSON.parse(this.csrfToken);\n        console.log('->', response);\n        console.log('this csrf token in service=', this.csrfToken);\n        return token;\n      }), catchError(error => {\n        console.error('Error fetching CSRF token', error);\n        return throwError(() => new Error('Error fetching CSRF token'));\n      }));\n    }\n  }\n  getSolverData() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  postMatrixData(matrixData) {\n    return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n      if (csrfToken) {\n        const headers = new HttpHeaders({\n          'X-CSRFToken': csrfToken,\n          'Content-Type': 'application/json'\n        });\n        return this.http.post(this.apiUrl, matrixData, {\n          headers,\n          responseType: 'json'\n        });\n      } else return throwError(() => new Error('CSRF token is undefined.'));\n    }));\n  }\n  postDegreeData(degreeData) {\n    return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n      const headers = new HttpHeaders({\n        'X-CSRFToken': csrfToken,\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(this.apiAnotherUrl, degreeData, {\n        headers,\n        responseType: 'json'\n      });\n    }));\n  }\n  postOrdinatesData(ordinatesData) {\n    return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n      const headers = new HttpHeaders({\n        'X-CSRFToken': csrfToken,\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(this.apiOrdinatesUrl, ordinatesData, {\n        headers,\n        responseType: 'json'\n      });\n    }));\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","of","catchError","map","switchMap","environment","ApiService","constructor","http","csrfToken","apiUrl","apiAnotherUrl","apiOrdinatesUrl","apiCsrfUrl","fetchCsrfToken","console","log","get","responseType","pipe","response","JSON","parse","token","error","Error","getSolverData","postMatrixData","matrixData","headers","post","postDegreeData","degreeData","postOrdinatesData","ordinatesData","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private csrfToken: string | null = null;\n\n  apiUrl = environment.apiUrl;\n  apiAnotherUrl = environment.apiAnotherUrl;\n  apiOrdinatesUrl = environment.apiOrdinatesUrl;\n  apiCsrfUrl = environment.apiCsrfUrl;\n\n  constructor(private http: HttpClient) { }\n\n  //retrive CSRF token\n  private fetchCsrfToken(): Observable<string> {\n    if (this.csrfToken) {\n      console.log('by fetching csrf token is - ', this.csrfToken);\n      return of(this.csrfToken); // 'of' is from rxjs\n    } else {\n      // Ensure this URL is correct and points to your Django endpoint for CSRF token retrieval\n      return this.http.get<{ csrfToken: string }>(`${environment.apiCsrfUrl}csrf/`,{ responseType:  'text' as 'json' }).pipe(\n        map(response => {\n          this.csrfToken = JSON.parse(response.csrfToken) as string;\n          const token = JSON.parse(this.csrfToken)\n          console.log('->', response)\n          console.log('this csrf token in service=',this.csrfToken);\n          \n          return token;\n        }),\n        catchError(error => {\n          console.error('Error fetching CSRF token', error);\n          return throwError(() => new Error('Error fetching CSRF token'));\n        })\n      );\n    }\n  }\n\n\n  getSolverData() {\n    return this.http.get<any>(`${this.apiUrl}`);\n  }\n\n  postMatrixData(matrixData: any): Observable<any> {\n    return this.fetchCsrfToken().pipe(\n      switchMap(csrfToken => {\n        if(csrfToken){\n          const headers = new HttpHeaders({ 'X-CSRFToken': csrfToken, 'Content-Type': 'application/json' })\n          return this.http.post<any>(this.apiUrl, matrixData, { headers, responseType:   'json'});\n        }\n        else return throwError(() => new Error('CSRF token is undefined.'));\n\n      })\n    );\n  }\n\n  postDegreeData(degreeData: any): Observable<any> {\n    return this.fetchCsrfToken().pipe(\n      switchMap(csrfToken => {\n        const headers = new HttpHeaders({ 'X-CSRFToken': csrfToken, 'Content-Type': 'application/json' });\n        return this.http.post<any>(this.apiAnotherUrl, degreeData, { headers, responseType:  'json' });\n      })\n    );\n  }\n\n  postOrdinatesData(ordinatesData: any): Observable<any> {\n    return this.fetchCsrfToken().pipe(\n      switchMap(csrfToken => {\n        const headers = new HttpHeaders({ 'X-CSRFToken': csrfToken, 'Content-Type': 'application/json' });\n        return this.http.post<any>(this.apiOrdinatesUrl, ordinatesData, { headers, responseType:  'json' });\n      })\n    );\n  }\n\n\n//   postMatrixData(matrixData: any) {\n//     return this.http.post<any>( this.apiUrl, matrixData );\n//   }\n\n//   postDegreeData(degreeData: any) {\n//      return this.http.post<any> ( this.apiAnotherUrl, degreeData ); //(`${this.apiUrl}another_post/`, degreeData);\n//   }\n\n//   postOrdinatesData(ordinatesData: any) {\n//     return this.http.post<any> ( this.apiOrdinatesUrl, ordinatesData ); //(`${this.apiUrl}ordinates/`, ordinatesData);\n//  }\n\n  \n  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}