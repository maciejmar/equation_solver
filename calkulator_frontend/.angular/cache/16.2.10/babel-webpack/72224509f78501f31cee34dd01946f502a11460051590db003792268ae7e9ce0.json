{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nexport class MatrixComponent {\n  constructor(fb, fbuilder, formb, apiService) {\n    this.fb = fb;\n    this.fbuilder = fbuilder;\n    this.formb = formb;\n    this.apiService = apiService;\n    this.degree = 0;\n    this.numberOfRows = 3;\n    this.numberOfColumns = 4;\n    this.profileForm = this.formb.group({\n      degree: ['']\n    });\n    this.n = 0;\n  }\n  ngOnInit() {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n  }\n  onSubmit1() {\n    const formData = this.profileForm.value;\n    this.apiService.postDegreeData(formData).subscribe({\n      next: response => console.log('Response:', response),\n      error: error => console.error('Error:', error)\n    });\n  }\n  submitMatrixForm() {\n    const matrixData = this.profileForm.value;\n    this.apiService.postMatrixData(matrixData).subscribe({\n      next: response => console.log('Response:', response),\n      error: error => console.error('Error:', error)\n    });\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"name\", \"degree\"], [\"type\", \"number\", \"formControlName\", \"degree\", \"name\", \"degree\", \"placeholder\", \"degree here\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Hello, here is the matrix form:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit1();\n        });\n        i0.ɵɵelement(3, \"label\", 1)(4, \"input\", 2);\n        i0.ɵɵelementStart(5, \"button\");\n        i0.ɵɵtext(6, \"Submit degree\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"p\");\n        i0.ɵɵtext(8, \"here is matrixForm\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","MatrixComponent","constructor","fb","fbuilder","formb","apiService","degree","numberOfRows","numberOfColumns","profileForm","group","n","ngOnInit","degreeForm","required","onSubmit1","formData","value","postDegreeData","subscribe","next","response","console","log","error","submitMatrixForm","matrixData","postMatrixData","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","MatrixComponent_Template_form_ngSubmit_2_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl,  Validators } from '@angular/forms';\nimport { ApiService } from '../api.service';\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.scss']\n})\n\nexport class MatrixComponent implements OnInit {\n \n  degreeForm!: FormGroup;\n  degree:number=0; \n  \n  numberOfRows: number = 3; \n  numberOfColumns: number = 4;\n\n\n  profileForm = this.formb.group({\n    degree: [''],\n    \n  });\n\n  \n\n\n\n  constructor(private fb: FormBuilder, private fbuilder:FormBuilder,  private formb: FormBuilder, private apiService: ApiService) {\n    \n  }\n\n  n:number = 0  \n  ngOnInit(): void {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n\n  }\n  \n\n    onSubmit1(): void {\n      const formData = this.profileForm.value;\n      this.apiService.postDegreeData(formData).subscribe({\n        next:response => console.log('Response:', response),\n        error: error => console.error('Error:', error)\n      });\n    }\n\n    submitMatrixForm():void {\n      const matrixData = this.profileForm.value;\n      this.apiService.postMatrixData(matrixData).subscribe({\n        next: response => console.log('Response:', response),\n        error: error => console.error('Error:', error)\n      });\n    }\n\n\n}\n\n","<p>Hello, here is the matrix form:</p>\n<form  [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit1()\" novalidate>\n    <label name= \"degree\"></label>\n    <input type=\"number\" formControlName = \"degree\" name=\"degree\" placeholder=\"degree here\">\n    <button>Submit degree</button>\n</form>\n\n\n  \n\n\n\n<p>here is matrixForm</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}