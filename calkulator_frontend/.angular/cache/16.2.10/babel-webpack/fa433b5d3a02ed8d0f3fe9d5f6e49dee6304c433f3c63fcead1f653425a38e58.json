{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.csrfToken = null;\n      this.apiUrl = environment.apiUrl;\n      this.apiAnotherUrl = environment.apiAnotherUrl;\n      this.apiOrdinatesUrl = environment.apiOrdinatesUrl;\n      this.apiCsrfUrl = environment.apiCsrfUrl;\n    }\n    //retrive CSRF token\n    fetchCsrfToken() {\n      if (this.csrfToken) {\n        return of(this.csrfToken); // 'of' is from rxjs\n      } else {\n        // Ensure this URL is correct and points to your Django endpoint for CSRF token retrieval\n        return this.http.get(`${environment.apiCsrfUrl}csrf/`, {\n          responseType: 'json'\n        }).pipe(map(response => {\n          this.csrfToken = response.csrfToken;\n          console.log('this isr response: ', response);\n          console.log('this csrf token in service=', this.csrfToken);\n          return this.csrfToken;\n        }), catchError(error => {\n          console.error('Error fetching CSRF token>>>>>>', error);\n          return throwError(() => new Error('Error fetching CSRF token'));\n        }));\n      }\n    }\n    getSolverData() {\n      return this.http.get(`${this.apiUrl}`);\n    }\n    postMatrixData(matrixData) {\n      return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n        if (csrfToken) {\n          console.log('csrftoken in postMatrixData ', csrfToken);\n          const headers = new HttpHeaders({\n            'X-CSRFToken': csrfToken,\n            'Content-Type': 'application/json'\n          });\n          return this.http.post(this.apiUrl, matrixData, {\n            headers,\n            responseType: 'json'\n          });\n        } else return throwError(() => new Error('CSRF token is undefined.'));\n      }));\n    }\n    postDegreeData(degreeData) {\n      return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n        const headers = new HttpHeaders({\n          'X-CSRFToken': csrfToken,\n          'Content-Type': 'application/json'\n        });\n        return this.http.post(this.apiAnotherUrl, degreeData, {\n          headers,\n          responseType: 'json'\n        });\n      }));\n    }\n    postOrdinatesData(ordinatesData) {\n      return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n        const headers = new HttpHeaders({\n          'X-CSRFToken': csrfToken,\n          'Content-Type': 'application/json'\n        });\n        return this.http.post(this.apiOrdinatesUrl, ordinatesData, {\n          headers,\n          responseType: 'json'\n        });\n      }));\n    }\n    static #_ = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}