{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"@angular/common\";\nfunction MatrixComponent_div_10_div_1_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1, \" Numbers only! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatrixComponent_div_10_div_1_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Cell is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatrixComponent_div_10_div_1_div_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only numbers are allowed!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatrixComponent_div_10_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, MatrixComponent_div_10_div_1_div_5_div_1_Template, 2, 0, \"div\", 27);\n    i0.ɵɵtemplate(2, MatrixComponent_div_10_div_1_div_5_div_2_Template, 2, 0, \"div\", 28);\n    i0.ɵɵtemplate(3, MatrixComponent_div_10_div_1_div_5_div_3_Template, 2, 0, \"div\", 28);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const j_r8 = i0.ɵɵnextContext().index;\n    const i_r5 = i0.ɵɵnextContext().index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_0_0 = ctx_r9.matrixForm.get(\"cell\" + i_r5 + \"_\" + j_r8)) == null ? null : tmp_0_0.touched) && ((tmp_0_0 = ctx_r9.matrixForm.get(\"cell\" + i_r5 + \"_\" + j_r8)) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"expressionInvalid\"]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r9.matrixForm.get(\"cell\" + i_r5 + \"_\" + j_r8)) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r9.matrixForm.get(\"cell\" + i_r5 + \"_\" + j_r8)) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"pattern\"]);\n  }\n}\nfunction MatrixComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"div\", 22)(2, \"input\", 23);\n    i0.ɵɵlistener(\"blur\", function MatrixComponent_div_10_div_1_Template_input_blur_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const j_r8 = restoredCtx.index;\n      const i_r5 = i0.ɵɵnextContext().index;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onFieldBlur(\"cell\" + i_r5 + \"_\" + j_r8));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 24);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, MatrixComponent_div_10_div_1_div_5_Template, 4, 3, \"div\", 25);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const j_r8 = ctx.index;\n    const i_r5 = i0.ɵɵnextContext().index;\n    const ctx_r6 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControlName\", \"cell\" + i_r5 + \"_\" + j_r8);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" x\", j_r8 + 1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r6.matrixForm.get(\"cell\" + i_r5 + \"_\" + j_r8)) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"pattern\"]);\n  }\n}\nfunction MatrixComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, MatrixComponent_div_10_div_1_Template, 6, 3, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.cols);\n  }\n}\nfunction MatrixComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.matrixForm.errors == null ? null : ctx_r1.matrixForm.errors[\"backend\"], \" \");\n  }\n}\nfunction MatrixComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵelement(1, \"input\", 32);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r20 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", \"ordin\" + i_r20);\n  }\n}\nfunction MatrixComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"div\", 33);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const result_r21 = ctx.$implicit;\n    const i_r22 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\" x\", i_r22, \"=\", i0.ɵɵpipeBind2(3, 3, result_r21, \"1.0-4\"), \"\", i_r22 < ctx_r3.results.length - 1 ? \"\" : \"\", \" \");\n  }\n}\nexport class MatrixComponent {\n  constructor(fb, fbuilder, formb, formbOrdinates, apiService) {\n    this.fb = fb;\n    this.fbuilder = fbuilder;\n    this.formb = formb;\n    this.formbOrdinates = formbOrdinates;\n    this.apiService = apiService;\n    this.degree = 4;\n    this.rows = Array(4);\n    this.cols = Array(4);\n    this.results = Array(4);\n    // ordinatesForm!: FormGroup;\n    this.profileForm = this.formb.group({\n      degree: ['']\n    });\n    //   matrixform: FormGroup = this.formb.group({\n    //     row: this.formb.array([])\n    // });\n    this.ordinatesForm = this.formbOrdinates.group({\n      row: this.formbOrdinates.array([])\n    });\n  }\n  ngOnInit() {\n    this.degreeForm = this.fb.group({\n      degree: [this.degree, Validators.required]\n    });\n    this.profileForm = this.fb.group({\n      degree: ['']\n    });\n    this.matrixForm = this.formb.group({});\n    for (let i = 0; i < this.degree; i++) {\n      for (let j = 0; j < this.degree; j++) {\n        const controlName = `cell${i}_${j}`;\n        this.matrixForm.addControl(controlName, new FormControl('', [Validators.required, Validators.pattern(/^-?\\d+(\\.\\d+)?$/), this.expressionValidator()]));\n      }\n    }\n    this.ordinatesForm = this.formb.group({});\n    for (let i = 0; i < this.degree; i++) {\n      {\n        this.ordinatesForm.addControl('ordin' + i, new FormControl(''));\n      }\n    }\n  }\n  updateMatrixSize(degree) {\n    this.rows = Array.from({\n      length: degree\n    }, (_, i) => i);\n    this.cols = Array.from({\n      length: degree\n    }, (_, i) => i);\n    // Reset and rebuild the matrix form based on new degree\n    this.matrixForm = this.formb.group({});\n    for (let i = 0; i < degree; i++) {\n      for (let j = 0; j < degree; j++) {\n        this.matrixForm.addControl(`cell${i}_${j}`, new FormControl('', [Validators.required, Validators.pattern(/^-?\\d+(\\.\\d+)?$/), this.expressionValidator()]));\n      }\n    }\n  }\n  updateOrdinatesSize(degree) {\n    // Reset and rebuild the ordinates form based on new degree\n    this.ordinatesForm = this.formb.group({});\n    for (let i = 0; i < degree; i++) {\n      this.ordinatesForm.addControl(`ordin${i}`, new FormControl('', Validators.required));\n    }\n  }\n  // onSubmit1(): void {\n  //   const formData = this.profileForm.value;\n  //   this.apiService.postDegreeData(formData).subscribe({\n  //     next:response => console.log('ResponseDegree:', response),\n  //     error: error => console.error('Error:', error)\n  //   });\n  // }\n  onSubmit1() {\n    // Extract the degree directly from the form control.\n    const degreeControl = this.profileForm.get('degree');\n    const newDegree = degreeControl ? +degreeControl.value : 0;\n    if (newDegree > 0) {\n      this.degree = newDegree;\n      this.updateMatrixSize(newDegree);\n      this.updateOrdinatesSize(newDegree);\n    }\n  }\n  submitMatrixForm() {\n    if (this.matrixForm.valid) {\n      // Proceed with submission\n    } else {\n      // Handle invalid form, e.g., by marking all fields as touched to show errors\n      this.matrixForm.markAllAsTouched();\n      console.log('Invalid matrix');\n    }\n    const matrixData = this.matrixForm.value;\n    console.log(this.matrixForm.value);\n    if (this.matrixForm.valid) {\n      // Process the valid form data\n      this.apiService.postMatrixData(matrixData).subscribe({\n        next: response => console.log('ResponseMatrix:', response),\n        error: error => {\n          console.log('error in submiting matrix -', error);\n          this.matrixForm.setErrors({\n            'backend': error.error.error\n          });\n        }\n      });\n    } else {\n      this.matrixForm.markAllAsTouched();\n      console.log('Invalid matrix');\n    }\n  }\n  submitOrdinatesForm() {\n    const ordinatesData = this.ordinatesForm.value;\n    console.log(this.ordinatesForm.value);\n    this.apiService.postOrdinatesData(ordinatesData).subscribe({\n      next: response => {\n        console.log('ResponseOrdinates:', response.solution);\n        this.results = [...response.solution];\n      },\n      error: error => console.error('Error:', error)\n    });\n  }\n  safeEvaluate(expression) {\n    try {\n      // Placeholder for safe evaluation logic\n      // e.g., using math.js: return math.evaluate(expression);\n      return eval(expression); // Note: Using eval() as a placeholder, not recommended for production\n    } catch {\n      return null; // Indicate failure to evaluate\n    }\n  }\n\n  expressionValidator() {\n    return control => {\n      const result = this.safeEvaluate(control.value); // Use the safe evaluation function\n      if (result === null || isNaN(result)) {\n        return {\n          'expressionInvalid': true\n        };\n      }\n      return null; // If the expression is valid and evaluates to a number\n    };\n  }\n\n  onFieldBlur(controlName) {\n    const control = this.matrixForm.get(controlName);\n    if (control && !control.valid) {\n      // The control is invalid after the user leaves the field\n      // Here, you can implement any logic you need to signal the error to the user\n      // For example, you could set a flag to show an error message next to the field\n    }\n  }\n  static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n    return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatrixComponent,\n    selectors: [[\"app-matrix\"]],\n    decls: 23,\n    vars: 9,\n    consts: [[1, \"forms-container\"], [1, \"form-profile\"], [\"novalidate\", \"\", 1, \"profile\", 3, \"formGroup\", \"ngSubmit\"], [\"name\", \"degree\"], [\"type\", \"number\", \"formControlName\", \"degree\", \"name\", \"degree\", \"placeholder\", \"degree here\", 1, \"form-control\", \"round\"], [1, \"btn\", \"btn-secondary\"], [1, \"form-matrix\"], [1, \"rounded\", 3, \"formGroup\", \"ngSubmit\"], [1, \"formWithButton\"], [\"class\", \"matrix-row\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-dark error-message\", \"role\", \"alert\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"buttonwidth\", 3, \"disabled\"], [1, \"form-ordinates\"], [1, \"ordinates-row\", 3, \"formGroup\", \"ngSubmit\"], [\"class\", \"form-control rounded ordinates-cell\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"badge\", \"badge-light\", \"container\"], [\"name\", \"response\", 1, \"results\"], [4, \"ngFor\", \"ngForOf\"], [1, \"matrix-row\"], [\"class\", \"matrix-cell\", 4, \"ngFor\", \"ngForOf\"], [1, \"matrix-cell\"], [1, \"cell-container\"], [\"type\", \"number\", \"id\", \"cell\", \"required\", \"\", 1, \"form-control\", 3, \"formControlName\", \"blur\"], [\"for\", \"cell\", 1, \"badge\", \"bg-secondary\", \"bgcell\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"alert\", \"alert-danger\"], [\"role\", \"alert\", 1, \"alert\", \"alert-dark\", \"error-message\"], [1, \"form-control\", \"rounded\", \"ordinates-cell\"], [\"type\", \"number\", \"required\", \"\", 1, \"rounded\", \"input-ordinate\", 3, \"formControlName\"], [1, \"solucionCell\"]],\n    template: function MatrixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit1();\n        });\n        i0.ɵɵelement(3, \"label\", 3)(4, \"input\", 4);\n        i0.ɵɵelementStart(5, \"button\", 5);\n        i0.ɵɵtext(6, \"Enter\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.submitMatrixForm();\n        });\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵtemplate(10, MatrixComponent_div_10_Template, 2, 1, \"div\", 9);\n        i0.ɵɵtemplate(11, MatrixComponent_div_11_Template, 2, 1, \"div\", 10);\n        i0.ɵɵelementStart(12, \"button\", 11);\n        i0.ɵɵtext(13, \"Submit\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(14, \"div\", 12)(15, \"form\", 13);\n        i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_15_listener() {\n          return ctx.submitOrdinatesForm();\n        });\n        i0.ɵɵtemplate(16, MatrixComponent_div_16_Template, 2, 1, \"div\", 14);\n        i0.ɵɵelementStart(17, \"button\", 15);\n        i0.ɵɵtext(18, \"Submit\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(19, \"div\", 16)(20, \"div\", 17);\n        i0.ɵɵtext(21, \" The solution is: \");\n        i0.ɵɵtemplate(22, MatrixComponent_span_22_Template, 4, 6, \"span\", 18);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.matrixForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.rows);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.matrixForm.errors == null ? null : ctx.matrixForm.errors[\"backend\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.matrixForm.invalid);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.ordinatesForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.rows);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.ordinatesForm.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.results);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i3.DecimalPipe],\n    styles: [\"body[_ngcontent-%COMP%] {\\n  background-color: rgb(2, 14, 24);\\n}\\n\\ninput[_ngcontent-%COMP%]::-webkit-outer-spin-button, input[_ngcontent-%COMP%]::-webkit-inner-spin-button {\\n  -webkit-appearance: none;\\n  margin: 0;\\n}\\n\\ninput[_ngcontent-%COMP%] {\\n  background-color: rgb(125, 138, 167);\\n}\\n\\n.badge[_ngcontent-%COMP%] {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.bgcell[_ngcontent-%COMP%] {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.profile[_ngcontent-%COMP%] {\\n  max-width: 12%;\\n  margin-bottom: 2%;\\n  margin-top: 2%;\\n}\\n\\n.forms-container[_ngcontent-%COMP%] {\\n  margin-top: 1%;\\n  margin-left: 1%;\\n  margin-bottom: 0;\\n  margin-right: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.form-profile[_ngcontent-%COMP%] {\\n  width: 25%;\\n}\\n\\n.form-matrix[_ngcontent-%COMP%] {\\n  width: 50%;\\n}\\n\\n.form-ordinates[_ngcontent-%COMP%] {\\n  width: 20%;\\n}\\n\\n.matrix-row[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  margin-bottom: 2%;\\n}\\n\\n.matrix-cell[_ngcontent-%COMP%] {\\n  margin: 0 1%;\\n  width: 15%;\\n  border-style: solid rgb(49, 49, 141);\\n  background-color: rgb(175, 175, 233);\\n}\\n\\n.cell-container[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\n.ordinates-row[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 40%;\\n}\\n\\n.ordinates-cell[_ngcontent-%COMP%] {\\n  background-color: rgba(19, 102, 128, 0.89);\\n  margin-top: 10%;\\n  margin-bottom: 10%;\\n  padding: 0;\\n}\\n\\n.input-ordinate[_ngcontent-%COMP%] {\\n  background-color: rgb(230, 231, 168);\\n  width: 100%;\\n}\\n\\n.formWithButton[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  width: 100%;\\n}\\n\\n.buttonwidth[_ngcontent-%COMP%] {\\n  width: 20%;\\n}\\n\\n.error-message[_ngcontent-%COMP%] {\\n  margin: 3%;\\n  color: rgb(155, 8, 8);\\n  background-color: chocolate;\\n}\\n\\n.results[_ngcontent-%COMP%] {\\n  color: rgb(226, 210, 190);\\n  background-color: rgb(155, 8, 8);\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  margin-top: 5%;\\n  font-size: 2.5em;\\n  background-color: rgb(155, 8, 8);\\n  color: rgb(175, 132, 75);\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: flex-start;\\n}\\n\\n.solutionCell[_ngcontent-%COMP%] {\\n  justify-content: flex-start;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWF0cml4L21hdHJpeC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUNFLGdDQUFBO0FBQUY7O0FBR0E7O0VBRUUsd0JBQUE7RUFDQSxTQUFBO0FBQUY7O0FBR0E7RUFDSSxvQ0FBQTtBQUFKOztBQUdBO0VBQ0Msa0JBQUE7RUFDQSxtQkFBQTtBQUFEOztBQUVBO0VBQ0ksa0JBQUE7RUFDQSxtQkFBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFDSjs7QUFFQTtFQUVBLFVBQUE7QUFBQTs7QUFHQTtFQUNBLFVBQUE7QUFBQTs7QUFHQTtFQUNBLFVBQUE7QUFBQTs7QUFNQTtFQUNJLGFBQUE7RUFDQSx1QkFBQTtFQUNBLGlCQUFBO0FBSEo7O0FBTUU7RUFDRSxZQUFBO0VBQ0EsVUFBQTtFQUNBLG9DQUFBO0VBQ0Esb0NBQUE7QUFISjs7QUFNRTtFQUNFLGFBQUE7QUFISjs7QUFNRTtFQUNDLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFVBQUE7QUFISDs7QUFLRTtFQUNFLDBDQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0VBQ0EsVUFBQTtBQUZKOztBQU1FO0VBQ0Usb0NBQUE7RUFDQSxXQUFBO0FBSEo7O0FBTUU7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7QUFISjs7QUFLRTtFQUNFLFVBQUE7QUFGSjs7QUFLRTtFQUNFLFVBQUE7RUFDQSxxQkFBQTtFQUNBLDJCQUFBO0FBRko7O0FBS0U7RUFFRSx5QkFBQTtFQUNBLGdDQUFBO0FBSEo7O0FBT0U7RUFDRSxjQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQ0FBQTtFQUNBLHdCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsMkJBQUE7QUFKSjs7QUFNRTtFQUNFLDJCQUFBO0FBSEoiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuYm9keXtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMiwgMTQsIDI0KTtcclxufVxyXG5cclxuaW5wdXQ6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXHJcbmlucHV0Ojotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG5pbnB1dHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTI1LCAxMzgsIDE2NywxKTtcclxufVxyXG5cclxuLmJhZGdle1xyXG4gdGV4dC1hbGlnbjogIGNlbnRlcjtcclxuIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuLmJnY2VsbHtcclxuICAgIHRleHQtYWxpZ246ICBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4ucHJvZmlsZXtcclxuICAgIG1heC13aWR0aDogMTIlO1xyXG4gICAgbWFyZ2luLWJvdHRvbToyJTtcclxuICAgIG1hcmdpbi10b3A6MiU7XHJcbn1cclxuXHJcbi5mb3Jtcy1jb250YWluZXJ7XHJcbiAgICBtYXJnaW4tdG9wOjElO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDElO1xyXG4gICAgbWFyZ2luLWJvdHRvbTowO1xyXG4gICAgbWFyZ2luLXJpZ2h0OjA7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG59XHJcblxyXG4uZm9ybS1wcm9maWxle1xyXG5cclxud2lkdGg6IDI1JTtcclxufVxyXG5cclxuLmZvcm0tbWF0cml4e1xyXG53aWR0aDo1MCU7XHJcbn1cclxuXHJcbi5mb3JtLW9yZGluYXRlc3tcclxud2lkdGg6MjAlO1xyXG4vL2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O1xyXG59XHJcblxyXG5cclxuXHJcbi5tYXRyaXgtcm93IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDIlO1xyXG4gIH1cclxuICBcclxuICAubWF0cml4LWNlbGwge1xyXG4gICAgbWFyZ2luOiAwIDElO1xyXG4gICAgd2lkdGg6MTUlO1xyXG4gICAgYm9yZGVyLXN0eWxlOnNvbGlkIHJnYig0OSwgNDksIDE0MSk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYigxNzUsIDE3NSwgMjMzKTtcclxuICB9XHJcbiAgXHJcbiAgLmNlbGwtY29udGFpbmVye1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICB9XHJcblxyXG4gIC5vcmRpbmF0ZXMtcm93e1xyXG4gICBkaXNwbGF5OmZsZXg7XHJcbiAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgIHdpZHRoOjQwJTtcclxuICB9XHJcbiAgLm9yZGluYXRlcy1jZWxse1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOSwgMTAyLCAxMjgsIDAuODkpO1xyXG4gICAgbWFyZ2luLXRvcDogMTAlO1xyXG4gICAgbWFyZ2luLWJvdHRvbToxMCU7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgXHJcbiAgICBcclxuICB9XHJcbiAgLmlucHV0LW9yZGluYXRle1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzAsIDIzMSwgMTY4LCAxKTtcclxuICAgIHdpZHRoOjEwMCU7XHJcbiAgfVxyXG5cclxuICAuZm9ybVdpdGhCdXR0b257XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjpjb2x1bW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgd2lkdGg6MTAwJTtcclxuICB9XHJcbiAgLmJ1dHRvbndpZHRoe1xyXG4gICAgd2lkdGg6MjAlO1xyXG4gIH1cclxuXHJcbiAgLmVycm9yLW1lc3NhZ2V7IFxyXG4gICAgbWFyZ2luOjMlO1xyXG4gICAgY29sb3I6cmdiKDE1NSwgOCwgOCk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjaG9jb2xhdGU7XHJcbiAgfVxyXG4gIFxyXG4gIC5yZXN1bHRze1xyXG5cclxuICAgIGNvbG9yOnJnYigyMjYsIDIxMCwgMTkwKTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNTUsIDgsIDgpO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICAuY29udGFpbmVye1xyXG4gICAgbWFyZ2luLXRvcDo1JTtcclxuICAgIGZvbnQtc2l6ZToyLjVlbTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNTUsIDgsIDgpO1xyXG4gICAgY29sb3I6cmdiKDE3NSwgMTMyLCA3NSk7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjpyb3c7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbiAgfVxyXG4gIC5zb2x1dGlvbkNlbGx7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["FormControl","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","MatrixComponent_div_10_div_1_div_5_div_1_Template","MatrixComponent_div_10_div_1_div_5_div_2_Template","MatrixComponent_div_10_div_1_div_5_div_3_Template","ɵɵadvance","ɵɵproperty","tmp_0_0","ctx_r9","matrixForm","get","i_r5","j_r8","touched","errors","tmp_1_0","tmp_2_0","ɵɵlistener","MatrixComponent_div_10_div_1_Template_input_blur_2_listener","restoredCtx","ɵɵrestoreView","_r17","index","ɵɵnextContext","ctx_r15","ɵɵresetView","onFieldBlur","MatrixComponent_div_10_div_1_div_5_Template","ɵɵtextInterpolate1","ctx_r6","MatrixComponent_div_10_div_1_Template","ctx_r0","cols","ctx_r1","ɵɵelement","i_r20","ɵɵtextInterpolate3","i_r22","ɵɵpipeBind2","result_r21","ctx_r3","results","length","MatrixComponent","constructor","fb","fbuilder","formb","formbOrdinates","apiService","degree","rows","Array","profileForm","group","ordinatesForm","row","array","ngOnInit","degreeForm","required","i","j","controlName","addControl","pattern","expressionValidator","updateMatrixSize","from","_","updateOrdinatesSize","onSubmit1","degreeControl","newDegree","value","submitMatrixForm","valid","markAllAsTouched","console","log","matrixData","postMatrixData","subscribe","next","response","error","setErrors","submitOrdinatesForm","ordinatesData","postOrdinatesData","solution","safeEvaluate","expression","eval","control","result","isNaN","ɵɵdirectiveInject","i1","FormBuilder","i2","ApiService","_2","selectors","decls","vars","consts","template","MatrixComponent_Template","rf","ctx","MatrixComponent_Template_form_ngSubmit_2_listener","MatrixComponent_Template_form_ngSubmit_8_listener","MatrixComponent_div_10_Template","MatrixComponent_div_11_Template","MatrixComponent_Template_form_ngSubmit_15_listener","MatrixComponent_div_16_Template","MatrixComponent_span_22_Template","invalid"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.ts","C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\matrix\\matrix.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\r\n\r\nimport { FormBuilder, FormGroup, FormArray,  FormControl, AbstractControl,  Validators, ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { ApiService } from '../api.service';\r\n@Component({\r\n  selector: 'app-matrix',\r\n  templateUrl: './matrix.component.html',\r\n  styleUrls: ['./matrix.component.scss']\r\n})\r\n\r\nexport class MatrixComponent implements OnInit {\r\n \r\n  degreeForm!: FormGroup;\r\n  degree:number=4; \r\n  \r\n  matrixForm!: FormGroup;\r\n  rows = Array(4);\r\n  cols = Array(4);\r\n  results  = Array(4);\r\n\r\n // ordinatesForm!: FormGroup;\r\n  \r\n  profileForm = this.formb.group({\r\n    degree: [''],\r\n  });\r\n\r\n//   matrixform: FormGroup = this.formb.group({\r\n//     row: this.formb.array([])\r\n// });\r\n\r\n ordinatesForm: FormGroup = this.formbOrdinates.group({\r\n  row: this.formbOrdinates.array([])\r\n })\r\n\r\n\r\n  constructor(private fb: FormBuilder, private fbuilder:FormBuilder,  private formb: FormBuilder, private formbOrdinates: FormBuilder,\r\n     private apiService: ApiService) {\r\n    \r\n  }\r\n\r\n   \r\n  ngOnInit(): void {\r\n    this.degreeForm = this.fb.group({\r\n      degree: [this.degree, Validators.required]\r\n    });\r\n\r\n    this.profileForm = this.fb.group({\r\n      degree: ['']\r\n    });\r\n\r\n\r\n    this.matrixForm = this.formb.group({});\r\n    for (let i = 0; i < this.degree; i++) {\r\n      for (let j = 0; j < this.degree; j++) {\r\n          const controlName = `cell${i}_${j}`;\r\n          this.matrixForm.addControl(controlName, new FormControl('', [\r\n              Validators.required,\r\n              Validators.pattern(/^-?\\d+(\\.\\d+)?$/),// Only numeric values alowed \r\n              this.expressionValidator() \r\n          ]));\r\n      }\r\n  }\r\n\r\n    this.ordinatesForm = this.formb.group({});\r\n    for (let i = 0; i < this.degree; i++) {\r\n      {\r\n        this.ordinatesForm.addControl('ordin' + i , new FormControl(''));\r\n      }\r\n    }\r\n\r\n  }\r\n    \r\n  private updateMatrixSize(degree: number): void {\r\n    this.rows = Array.from({length: degree}, (_, i) => i);\r\n    this.cols = Array.from({length: degree}, (_, i) => i);\r\n  \r\n    // Reset and rebuild the matrix form based on new degree\r\n    this.matrixForm = this.formb.group({});\r\n    for (let i = 0; i < degree; i++) {\r\n      for (let j = 0; j < degree; j++) {\r\n        this.matrixForm.addControl(`cell${i}_${j}`, new FormControl('', [\r\n          Validators.required,\r\n          Validators.pattern(/^-?\\d+(\\.\\d+)?$/),\r\n          this.expressionValidator()\r\n        ]));\r\n      }\r\n    }\r\n  }\r\n  \r\n  private updateOrdinatesSize(degree: number): void {\r\n    // Reset and rebuild the ordinates form based on new degree\r\n    this.ordinatesForm = this.formb.group({});\r\n    for (let i = 0; i < degree; i++) {\r\n      this.ordinatesForm.addControl(`ordin${i}`, new FormControl('', Validators.required));\r\n    }\r\n  }\r\n\r\n    // onSubmit1(): void {\r\n    //   const formData = this.profileForm.value;\r\n    //   this.apiService.postDegreeData(formData).subscribe({\r\n    //     next:response => console.log('ResponseDegree:', response),\r\n    //     error: error => console.error('Error:', error)\r\n    //   });\r\n    // }\r\n\r\n    onSubmit1(): void {\r\n      // Extract the degree directly from the form control.\r\n      const degreeControl = this.profileForm.get('degree');\r\n      const newDegree = degreeControl ? +degreeControl.value! : 0;\r\n      if (newDegree > 0) {\r\n        this.degree = newDegree;\r\n        this.updateMatrixSize(newDegree);\r\n        this.updateOrdinatesSize(newDegree);\r\n      }\r\n    }\r\n\r\n    submitMatrixForm():void {\r\n      if (this.matrixForm.valid) {\r\n        // Proceed with submission\r\n      } else {\r\n        // Handle invalid form, e.g., by marking all fields as touched to show errors\r\n        this.matrixForm.markAllAsTouched();\r\n        console.log('Invalid matrix');\r\n      }\r\n      const matrixData = this.matrixForm.value;\r\n      console.log(this.matrixForm.value);\r\n      if (this.matrixForm.valid) {\r\n        // Process the valid form data\r\n        this.apiService.postMatrixData(matrixData).subscribe({\r\n          next: response => console.log('ResponseMatrix:', response),\r\n          error: error => {\r\n            console.log('error in submiting matrix -', error);\r\n            this.matrixForm.setErrors({ 'backend': error.error.error });\r\n          }\r\n        });\r\n      } \r\n      else {    \r\n         this.matrixForm.markAllAsTouched();\r\n         console.log('Invalid matrix');\r\n      }\r\n    }\r\n\r\n    submitOrdinatesForm():void {\r\n        const ordinatesData = this.ordinatesForm.value;\r\n        console.log(this.ordinatesForm.value);\r\n        this.apiService.postOrdinatesData(ordinatesData).subscribe({\r\n           next: response => { \r\n                               console.log('ResponseOrdinates:', response.solution);\r\n                               this.results = [...response.solution];\r\n                            },\r\n                           \r\n           error: error => console.error('Error:', error)\r\n        })\r\n    }\r\n    \r\n    safeEvaluate(expression: string): number | null {\r\n      try {\r\n        // Placeholder for safe evaluation logic\r\n        // e.g., using math.js: return math.evaluate(expression);\r\n        return eval(expression); // Note: Using eval() as a placeholder, not recommended for production\r\n      } catch {\r\n        return null; // Indicate failure to evaluate\r\n      }\r\n    }\r\n\r\n    expressionValidator(): ValidatorFn {\r\n      return (control: AbstractControl): ValidationErrors | null => {\r\n        const result = this.safeEvaluate(control.value); // Use the safe evaluation function\r\n        if (result === null || isNaN(result)) {\r\n          return { 'expressionInvalid': true };\r\n        }\r\n        return null; // If the expression is valid and evaluates to a number\r\n      };\r\n    }\r\n\r\n    onFieldBlur(controlName: string): void {\r\n      const control = this.matrixForm.get(controlName);\r\n      if (control && !control.valid) {\r\n        \r\n        // The control is invalid after the user leaves the field\r\n        // Here, you can implement any logic you need to signal the error to the user\r\n        // For example, you could set a flag to show an error message next to the field\r\n      }\r\n    }\r\n         \r\n\r\n}\r\n\r\n","<div class=\"forms-container\">\r\n    <div class=\"form-profile\">\r\n        <form  [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit1()\" class=\"profile\" novalidate >\r\n            <label name= \"degree\"></label>\r\n            <input type=\"number\" formControlName = \"degree\" name=\"degree\" class =\"form-control round\" placeholder=\"degree here\">\r\n            <button class=\"btn btn-secondary\">Enter</button>\r\n        </form>\r\n    </div>\r\n    <div class=\"form-matrix\">\r\n        <form [formGroup]=\"matrixForm\" (ngSubmit)=\"submitMatrixForm()\" class=\"rounded\">\r\n            <div class=\"formWithButton\">\r\n                <div *ngFor=\"let row of rows; let i = index\" class=\"matrix-row\">\r\n                    <div *ngFor=\"let col of cols; let j = index\" class=\"matrix-cell\">\r\n                        <div class=\"cell-container\">\r\n                            <input type=\"number\" \r\n                                  [formControlName]=\"'cell' + i + '_' + j\" \r\n                                  class=\"form-control\"\r\n                                  id=\"cell\"\r\n                                  (blur)=\"onFieldBlur('cell' + i + '_' + j)\"\r\n                                  required>\r\n                            <label for=\"cell\" class=\"badge bg-secondary bgcell\" > x{{j+1}}</label>\r\n                            <div *ngIf=\"matrixForm.get('cell' + i + '_' + j)?.errors?.['pattern']\" class=\"error-message\">\r\n                                \r\n                                \r\n                                <div *ngIf=\"matrixForm.get('cell' + i + '_' + j)?.touched && matrixForm.get('cell' + i + '_' + j)?.errors?.['expressionInvalid']\"\r\n                                      class=\"alert alert-danger\">\r\n                                           Numbers only!\r\n                                </div>\r\n                                <div *ngIf=\"matrixForm.get('cell' + i + '_' + j)?.errors?.['required']\">Cell is required.</div>\r\n                               <div *ngIf=\"matrixForm.get('cell' + i + '_' + j)?.errors?.['pattern']\">Only numbers are allowed!</div>\r\n                            </div>\r\n                           \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"matrixForm.errors?.['backend']\" class=\"alert alert-dark error-message\" role=\"alert\" >\r\n                    {{ matrixForm.errors?.['backend'] }}\r\n                </div>\r\n            \r\n                <button [disabled]=\"matrixForm.invalid\" type=\"submit\" class=\"btn btn-primary buttonwidth\">Submit</button>\r\n            </div>\r\n        </form>\r\n    </div> \r\n    <div class=\"form-ordinates\">  \r\n        <form [formGroup]=\"ordinatesForm\" class=\"ordinates-row\" (ngSubmit) = \"submitOrdinatesForm()\">\r\n            <div *ngFor=\"let row of rows; let i = index\" class=\"form-control rounded ordinates-cell\">\r\n                    <input type =\"number\" class=\"rounded input-ordinate\" [formControlName]=\"'ordin'+ i\" required/>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"ordinatesForm.invalid\">Submit</button>\r\n        </form>\r\n    </div>\r\n    \r\n</div>\r\n<div class=\"badge badge-light container\">\r\n    <div class=\"results\" name=\"response\">\r\n        The solution is: \r\n        <span *ngFor=\"let result of results; let i = index\">\r\n            <div class=\"solucionCell\">\r\n                    x{{i}}={{result| number:'1.0-4'}}{{i < results.length - 1 ? '' : ''}}\r\n            </div>        \r\n        </span> \r\n    </div>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}