{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"@angular/common\";\nfunction MatrixComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" degree must be an integer between 2 and 7 \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"top\": a0,\n    \"left\": a1\n  };\n};\nfunction MatrixComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"span\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(2, _c0, ctx_r1.previewPositionY + \"px\", ctx_r1.previewPositionX + \"px\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.previewValue);\n  }\n}\nfunction MatrixComponent_div_9_div_2_div_1_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Numbers only! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatrixComponent_div_9_div_2_div_1_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Cell is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatrixComponent_div_9_div_2_div_1_div_6_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only numbers are allowed!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatrixComponent_div_9_div_2_div_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtemplate(1, MatrixComponent_div_9_div_2_div_1_div_6_div_1_Template, 2, 0, \"div\", 5);\n    i0.ɵɵtemplate(2, MatrixComponent_div_9_div_2_div_1_div_6_div_2_Template, 2, 0, \"div\", 29);\n    i0.ɵɵtemplate(3, MatrixComponent_div_9_div_2_div_1_div_6_div_3_Template, 2, 0, \"div\", 29);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const j_r13 = i0.ɵɵnextContext().index;\n    const i_r10 = i0.ɵɵnextContext().index;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_0_0 = ctx_r14.matrixForm.get(\"cell\" + i_r10 + \"_\" + j_r13)) == null ? null : tmp_0_0.touched) && ((tmp_0_0 = ctx_r14.matrixForm.get(\"cell\" + i_r10 + \"_\" + j_r13)) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"expressionInvalid\"]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r14.matrixForm.get(\"cell\" + i_r10 + \"_\" + j_r13)) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r14.matrixForm.get(\"cell\" + i_r10 + \"_\" + j_r13)) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"pattern\"]);\n  }\n}\nfunction MatrixComponent_div_9_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"div\", 24)(2, \"input\", 25);\n    i0.ɵɵlistener(\"blur\", function MatrixComponent_div_9_div_2_div_1_Template_input_blur_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const j_r13 = restoredCtx.index;\n      const i_r10 = i0.ɵɵnextContext().index;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.onFieldBlur(\"cell\" + i_r10 + \"_\" + j_r13));\n    })(\"focus\", function MatrixComponent_div_9_div_2_div_1_Template_input_focus_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const j_r13 = restoredCtx.index;\n      const i_r10 = i0.ɵɵnextContext().index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      let tmp_b_0;\n      return i0.ɵɵresetView(ctx_r23.showCellPreview($event, \"cell\" + i_r10 + \"_\" + j_r13, (tmp_b_0 = ctx_r23.matrixForm.get(\"cell\" + i_r10 + \"_\" + j_r13)) == null ? null : tmp_b_0.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\")(4, \"label\", 26);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, MatrixComponent_div_9_div_2_div_1_div_6_Template, 4, 3, \"div\", 27);\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵtext(8, \"+\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const j_r13 = ctx.index;\n    const i_r10 = i0.ɵɵnextContext().index;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    let tmp_2_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControlName\", \"cell\" + i_r10 + \"_\" + j_r13);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" x\", j_r13 + 1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r11.matrixForm.get(\"cell\" + i_r10 + \"_\" + j_r13)) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(j_r13 < ctx_r11.cols.length - 1 ? \"plusSign\" : \"plusSign hiddenPlus\");\n  }\n}\nfunction MatrixComponent_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, MatrixComponent_div_9_div_2_div_1_Template, 9, 5, \"div\", 21);\n    i0.ɵɵelementStart(2, \"span\", 22);\n    i0.ɵɵtext(3, \"=\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.cols);\n  }\n}\nfunction MatrixComponent_div_9_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.matrixForm.errors == null ? null : ctx_r5.matrixForm.errors[\"backend\"], \" \");\n  }\n}\nfunction MatrixComponent_div_9_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 31);\n    i0.ɵɵtext(1, \"Submit matrix\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r6.matrixForm.invalid && (!ctx_r6.okToCompleteMatrixForm || !(ctx_r6.matrixForm.errors == null ? null : ctx_r6.matrixForm.errors[\"singularMatrix\"])));\n  }\n}\nfunction MatrixComponent_div_9_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"div\", 23)(2, \"div\", 24)(3, \"div\", 32)(4, \"input\", 33);\n    i0.ɵɵlistener(\"focus\", function MatrixComponent_div_9_div_6_Template_input_focus_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r29);\n      const i_r27 = restoredCtx.index;\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      let tmp_b_0;\n      return i0.ɵɵresetView(ctx_r28.showCellPreview($event, \"ordin\" + i_r27, (tmp_b_0 = ctx_r28.ordinatesForm.get(\"ordin\" + i_r27)) == null ? null : tmp_b_0.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵelement(6, \"label\", 34);\n    i0.ɵɵtext(7, \"x\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const i_r27 = ctx.index;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formControlName\", \"ordin\" + i_r27);\n  }\n}\nfunction MatrixComponent_div_9_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r8.ordinatesForm.valid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.matrixForm.errors ? \"Change matrix\" : \"See result\", \" \");\n  }\n}\nfunction MatrixComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"form\", 14);\n    i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_div_9_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.submitMatrixForm());\n    });\n    i0.ɵɵtemplate(2, MatrixComponent_div_9_div_2_Template, 4, 1, \"div\", 15);\n    i0.ɵɵtemplate(3, MatrixComponent_div_9_div_3_Template, 2, 1, \"div\", 16);\n    i0.ɵɵtemplate(4, MatrixComponent_div_9_button_4_Template, 2, 1, \"button\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"form\", 18);\n    i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_div_9_Template_form_ngSubmit_5_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r32.submitOrdinatesForm());\n    });\n    i0.ɵɵtemplate(6, MatrixComponent_div_9_div_6_Template, 8, 1, \"div\", 15);\n    i0.ɵɵtemplate(7, MatrixComponent_div_9_button_7_Template, 2, 2, \"button\", 19);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.matrixForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.rows);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.matrixForm.errors == null ? null : ctx_r2.matrixForm.errors[\"backend\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.matrixForm.dirty && ctx_r2.matrixForm.valid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.ordinatesForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.rows);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.ordinatesForm.dirty && ctx_r2.ordinatesForm.valid && !ctx_r2.okToCompleteMatrixForm && !(ctx_r2.matrixForm.errors == null ? null : ctx_r2.matrixForm.errors[\"singularMatrix\"]));\n  }\n}\nfunction MatrixComponent_div_10_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const result_r34 = ctx.$implicit;\n    const i_r35 = ctx.index;\n    const ctx_r33 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\" x\", i_r35 + 1, \"=\", i0.ɵɵpipeBind2(3, 3, result_r34, \"1.0-4\"), \"\", i_r35 < ctx_r33.results.length - 1 ? \"\" : \"\", \" \");\n  }\n}\nfunction MatrixComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36)(1, \"div\", 37);\n    i0.ɵɵtext(2, \" The solution is: \");\n    i0.ɵɵtemplate(3, MatrixComponent_div_10_span_3_Template, 4, 6, \"span\", 38);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\nexport let MatrixComponent = /*#__PURE__*/(() => {\n  class MatrixComponent {\n    constructor(fb, fbuilder, formb, formbOrdinates, apiService) {\n      this.fb = fb;\n      this.fbuilder = fbuilder;\n      this.formb = formb;\n      this.formbOrdinates = formbOrdinates;\n      this.apiService = apiService;\n      this.minSize = 2;\n      this.maxSize = 7;\n      this.rows = [];\n      this.cols = [];\n      this.results = [];\n      this.okToCompleteOrdinatesForm = false;\n      this.okToCompleteMatrixForm = true;\n      this.matrixSingular = false;\n      this.showPreview = false; // Controls visibility of the preview window\n      this.previewValue = ''; // The value displayed in the preview\n      this.previewPositionX = 0; // X-coordinate for positioning\n      this.previewPositionY = 0; // Y-coordinate for positioning\n      // ordinatesForm!: FormGroup;\n      this.profileForm = this.formb.group({\n        degree: ['']\n      });\n      //   matrixform: FormGroup = this.formb.group({\n      //     row: this.formb.array([])\n      // });\n      this.ordinatesForm = this.formbOrdinates.group({\n        row: this.formbOrdinates.array([])\n      });\n    }\n    ngOnInit() {\n      this.ordinatesForm.invalid;\n      this.degreeForm = this.fb.group({\n        degree: [this.degree, Validators.required, this.degreeValidator()]\n      });\n      this.profileForm = this.fb.group({\n        degree: ['']\n      });\n      this.matrixForm = this.formb.group({});\n      for (let i = 0; i < this.degree; i++) {\n        for (let j = 0; j < this.degree; j++) {\n          const controlName = `cell${i}_${j}`;\n          this.matrixForm.addControl(controlName, new FormControl('', [Validators.required, Validators.pattern(/^-?\\d+(\\.\\d+)?$/), this.expressionValidator()]));\n        }\n      }\n      this.ordinatesForm = this.formb.group({});\n      for (let i = 0; i < this.degree; i++) {\n        {\n          this.ordinatesForm.addControl('ordin' + i, new FormControl(''));\n        }\n      }\n      this.matrixForm.valueChanges.subscribe(() => {\n        //if(this.okToCompleteMatrixForm && !this.okToCompleteOrdinatesForm)\n        this.okToCompleteOrdinatesForm = false;\n      });\n    }\n    updateMatrixSize(degree) {\n      this.rows = Array.from({\n        length: degree\n      }, (_, i) => i);\n      this.cols = Array.from({\n        length: degree\n      }, (_, i) => i);\n      // Reset and rebuild the matrix form based on new degree\n      this.matrixForm = this.formb.group({});\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < degree; j++) {\n          this.matrixForm.addControl(`cell${i}_${j}`, new FormControl('', [Validators.required, Validators.pattern(/^-?\\d+(\\.\\d+)?$/), this.expressionValidator()]));\n        }\n      }\n    }\n    updateOrdinatesSize(degree) {\n      // Reset and rebuild the ordinates form based on new degree\n      this.ordinatesForm = this.formb.group({});\n      for (let i = 0; i < degree; i++) {\n        this.ordinatesForm.addControl(`ordin${i}`, new FormControl('', Validators.required));\n      }\n    }\n    // onSubmit1(): void {\n    //   const formData = this.profileForm.value;\n    //   this.apiService.postDegreeData(formData).subscribe({\n    //     next:response => console.log('ResponseDegree:', response),\n    //     error: error => console.error('Error:', error)\n    //   });\n    // }\n    onSubmit1() {\n      const degreeControl = this.profileForm.get('degree');\n      if (degreeControl) {\n        const value = degreeControl.value ?? '';\n        const newDegree = parseInt(value, 10); // ✅ Convert to integer\n        if (!isNaN(newDegree) && newDegree >= this.minSize && newDegree <= this.maxSize) {\n          this.degree = newDegree;\n          this.updateMatrixSize(newDegree);\n          this.updateOrdinatesSize(newDegree);\n        } else {\n          console.error(\"Invalid degree value:\", degreeControl.value);\n        }\n      }\n      // Extract the degree directly from the form control.\n      // const degreeControl = this.profileForm.get('degree');\n      // const newDegree = degreeControl ? +degreeControl.value! : 0;\n      // if (newDegree >= this.minSize && newDegree <= this.maxSize)  {\n      //   this.degree = newDegree;\n      //   this.updateMatrixSize(newDegree);\n      //   this.updateOrdinatesSize(newDegree);\n      // }\n    }\n\n    submitMatrixForm() {\n      if (this.matrixForm.valid) {\n        // Proceed with submission\n        this.matrixSingular = false;\n      } else {\n        // Handle invalid form, e.g., by marking all fields as touched to show errors\n        this.matrixForm.markAllAsTouched();\n        console.log('Invalid matrix');\n      }\n      const matrixData = this.matrixForm.value;\n      // Convert all matrix values to numbers\n      Object.keys(matrixData).forEach(key => {\n        matrixData[key] = matrixData[key] !== '' ? parseFloat(matrixData[key]) : null;\n      });\n      console.log('Processed matrix data:', matrixData);\n      console.log(this.matrixForm.value);\n      if (this.matrixForm.valid) {\n        this.matrixForm.disable();\n        this.okToCompleteOrdinatesForm = true;\n        this.okToCompleteMatrixForm = false;\n        // Process the valid form data\n        this.apiService.postMatrixData(matrixData).subscribe({\n          next: response => console.log('ResponseMatrix:', response),\n          error: error => {\n            console.log('error in submiting matrix -', error);\n            if (error.error && error.error.error === 'Matrix is singular, cannot proceed') {\n              // If the error is specifically because the matrix is singular\n              this.matrixForm.setErrors({\n                'singularMatrix': 'Matrix is singular, cannot proceed'\n              });\n              this.matrixSingular = true;\n              //this.okToCompleteOrdinatesForm = false;\n            }\n\n            this.matrixForm.setErrors({\n              'backend': error.error.error\n            });\n          }\n        });\n      } else {\n        this.matrixForm.markAllAsTouched();\n        console.log('Invalid matrix');\n      }\n    }\n    submitOrdinatesForm() {\n      const ordinatesData = this.ordinatesForm.value;\n      // Convert all ordinates to numbers\n      Object.keys(ordinatesData).forEach(key => {\n        ordinatesData[key] = ordinatesData[key] !== '' ? parseFloat(ordinatesData[key]) : null;\n      });\n      console.log('Processed ordinates data:', ordinatesData);\n      if (this.ordinatesForm.valid && this.okToCompleteOrdinatesForm) {\n        this.matrixForm.enable();\n        this.okToCompleteOrdinatesForm = false;\n        this.okToCompleteMatrixForm = true;\n      }\n      console.log('ordinates in submitOrdinatesForm = ', this.ordinatesForm.value);\n      console.log('matrix in submitOrdinatesForm = ', this.matrixForm.value);\n      if (this.matrixForm.errors?.['singularMatrix']) this.okToCompleteMatrixForm = true;\n      this.apiService.postOrdinatesData(ordinatesData).subscribe({\n        next: response => {\n          console.log('ResponseOrdinates:', response.solution);\n          this.results = [...response.solution];\n        },\n        error: error => console.error('Error:', error)\n      });\n    }\n    safeEvaluate(expression) {\n      try {\n        // Placeholder for safe evaluation logic\n        // e.g., using math.js: return math.evaluate(expression);\n        return eval(expression); // Note: Using eval() as a placeholder, not recommended for production\n      } catch {\n        return null; // Indicate failure to evaluate\n      }\n    }\n\n    expressionValidator() {\n      return control => {\n        const result = this.safeEvaluate(control.value); // Use the safe evaluation function\n        if (result === null || isNaN(result)) {\n          return {\n            'expressionInvalid': true\n          };\n        }\n        return null; // If the expression is valid and evaluates to a number\n      };\n    }\n\n    degreeValidator() {\n      return control => {\n        const result = control.value;\n        if (result < this.minSize || result > this.maxSize) {\n          return {\n            'expressionInvalid': true\n          };\n        }\n        return null;\n      };\n    }\n    onFieldBlur(controlName) {\n      const control = this.matrixForm.get(controlName);\n      if (control && !control.valid) {\n        // The control is invalid after the user leaves the field\n        // Here, you can implement any logic you need to signal the error to the user\n        // For example, you could set a flag to show an error message next to the field\n      }\n    }\n    showCellPreview(event, fieldName, value) {\n      this.showPreview = true;\n      this.previewValue = value || ''; // Display value (empty if none)\n      // Get the target input field's position\n      const target = event.target;\n      const rect = target.getBoundingClientRect();\n      // Position the preview above the input field\n      this.previewPositionX = rect.left + window.scrollX - 10;\n      this.previewPositionY = rect.top + window.scrollY - 60;\n      // Clear any existing timeout to prevent premature hiding\n      clearTimeout(this.previewTimeout);\n      // Hide ONLY the preview window after 3 seconds (inputs stay visible)\n      this.previewTimeout = setTimeout(() => {\n        this.hidePreviewOnly();\n      }, 3000);\n    }\n    // Hide the floating preview window (but NOT the input fields)\n    hidePreviewOnly() {\n      this.showPreview = false;\n    }\n    static #_ = this.ɵfac = function MatrixComponent_Factory(t) {\n      return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MatrixComponent,\n      selectors: [[\"app-matrix\"]],\n      decls: 11,\n      vars: 6,\n      consts: [[1, \"forms-container\"], [1, \"form-profile\"], [\"novalidate\", \"\", 1, \"profile\", 3, \"formGroup\", \"ngSubmit\"], [\"name\", \"degree\"], [\"type\", \"tel\", \"formControlName\", \"degree\", \"name\", \"degree\", \"placeholder\", \"degree\", 1, \"form-control\", \"round\", 3, \"focus\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"btn\", \"btn-secondary\", \"button_profile\", 3, \"disabled\"], [\"class\", \"floating-preview\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"form-matrix matrix-direction\", 4, \"ngIf\"], [\"class\", \"badge text-left container\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"], [1, \"floating-preview\", 3, \"ngStyle\"], [1, \"preview-text\"], [1, \"form-matrix\", \"matrix-direction\"], [3, \"formGroup\", \"ngSubmit\"], [\"class\", \"matrix-row\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-dark error-message\", \"role\", \"alert\", 4, \"ngIf\"], [\"type\", \"submit\", \"class\", \"btn btn-primary buttonwidth buttonsMargin\", 3, \"disabled\", 4, \"ngIf\"], [1, \"form-matrix\", \"ordinates-direction\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"submit\", \"class\", \"btn btn-primary blink_me\", 3, \"disabled\", 4, \"ngIf\"], [1, \"matrix-row\"], [\"class\", \"matrix-cell\", 4, \"ngFor\", \"ngForOf\"], [1, \"equalSign\"], [1, \"matrix-cell\"], [1, \"cell-container\"], [\"type\", \"tel\", \"id\", \"cell\", \"required\", \"\", 1, \"cell-input\", 3, \"formControlName\", \"blur\", \"focus\"], [\"for\", \"cell\", 1, \"badge\", \"bg-secondary\", \"bgcell\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"], [4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-dark\", \"error-message\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"buttonwidth\", \"buttonsMargin\", 3, \"disabled\"], [1, \"cell-input\"], [\"type\", \"tel\", \"required\", \"\", 1, \"input-ordinate\", 3, \"formControlName\", \"focus\"], [1, \"badge\", \"bg-secondary\", \"bgcell\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"blink_me\", 3, \"disabled\"], [1, \"badge\", \"text-left\", \"container\"], [\"name\", \"response\", 1, \"solution_elements\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function MatrixComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function MatrixComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.onSubmit1();\n          });\n          i0.ɵɵelement(3, \"label\", 3);\n          i0.ɵɵelementStart(4, \"input\", 4);\n          i0.ɵɵlistener(\"focus\", function MatrixComponent_Template_input_focus_4_listener($event) {\n            let tmp_b_0;\n            return ctx.showCellPreview($event, \"degree\", (tmp_b_0 = ctx.profileForm.get(\"degree\")) == null ? null : tmp_b_0.value);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(5, MatrixComponent_div_5_Template, 2, 0, \"div\", 5);\n          i0.ɵɵelementStart(6, \"button\", 6);\n          i0.ɵɵtext(7, \"Enter\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, MatrixComponent_div_8_Template, 3, 5, \"div\", 7);\n          i0.ɵɵtemplate(9, MatrixComponent_div_9_Template, 8, 7, \"div\", 8);\n          i0.ɵɵtemplate(10, MatrixComponent_div_10_Template, 4, 1, \"div\", 9);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", (ctx.profileForm == null ? null : ctx.profileForm.touched) && (ctx.profileForm == null ? null : ctx.profileForm.errors == null ? null : ctx.profileForm.errors[\"expressionInvalid\"]));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.profileForm.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.showPreview);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.profileForm.value && ctx.profileForm.dirty);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.ordinatesForm.dirty && ctx.ordinatesForm.valid && ctx.matrixForm.dirty && ctx.matrixForm.valid && !ctx.matrixSingular && ctx.okToCompleteMatrixForm);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i3.NgStyle, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i3.DecimalPipe],\n      styles: [\"body[_ngcontent-%COMP%]{background-color:#97b6cf}*[_ngcontent-%COMP%]{border-radius:5px}input[_ngcontent-%COMP%]::-webkit-outer-spin-button, input[_ngcontent-%COMP%]::-webkit-inner-spin-button{-webkit-appearance:none}input[_ngcontent-%COMP%]{background-color:#7d8aa7;font-size:1rem;padding:.5em;border:1px solid #ccc}@media (min-width: 768px){.forms-container[_ngcontent-%COMP%]{flex-direction:row;flex-wrap:wrap}.form-matrix[_ngcontent-%COMP%], .form-ordinates[_ngcontent-%COMP%]{width:80%}}@media screen and (min-width: 1200px){.form-matrix[_ngcontent-%COMP%], .form-ordinates[_ngcontent-%COMP%]{flex-basis:auto}}.button_profile[_ngcontent-%COMP%]{margin-top:15%}.cell-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;width:auto}.ordinatesButton[_ngcontent-%COMP%]{display:flex;flex-direction:row}.formWithButton[_ngcontent-%COMP%]{font-size:1rem}.bgcell[_ngcontent-%COMP%]{width:auto;height:auto;padding:0;font-size:2em}.matrix-cell[_ngcontent-%COMP%]{width:100%}.forms-container[_ngcontent-%COMP%]{font-size:1em;width:auto;margin:1%}.profile[_ngcontent-%COMP%]{max-width:14%;margin-bottom:2%;margin-top:3%;margin-left:1%}.form-profile[_ngcontent-%COMP%]{width:30%}.form-matrix[_ngcontent-%COMP%]{width:auto;display:flex;flex-direction:row}.matrix-direction[_ngcontent-%COMP%]{flex-direction:row}.ordinates-direction[_ngcontent-%COMP%]{flex-direction:column}.form-ordinates[_ngcontent-%COMP%]{width:50%}.matrix-row[_ngcontent-%COMP%]{display:flex;align-content:center}.cell-input[_ngcontent-%COMP%], .ordinates-row[_ngcontent-%COMP%]{font-size:1em}.ordinates-cell[_ngcontent-%COMP%]{background-color:#136680e3}.buttonwidth[_ngcontent-%COMP%]{width:50%}.error-message[_ngcontent-%COMP%]{color:#9b0808;background-color:#d2691e}.error-placeholder[_ngcontent-%COMP%]{height:20px;visibility:hidden}.results[_ngcontent-%COMP%]{color:#e2d2be;background-color:#9b0808;text-align:left}.container[_ngcontent-%COMP%]{align-items:left;width:80%;margin-top:1%;margin-left:0;font-size:4vw;max-width:auto;background-color:#9b0808;color:#af844b;display:flex}.buttonsMargin[_ngcontent-%COMP%]{margin-top:1%}.plusSign[_ngcontent-%COMP%]{color:#e095e0;font-size:1.5em;display:flex}.equalSign[_ngcontent-%COMP%]{color:#e095e0;font-size:1.5em}.hiddenPlus[_ngcontent-%COMP%]{visibility:hidden}input[_ngcontent-%COMP%]{width:8vw}.forms-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;font-size:1em;width:auto;margin:1%}@media (min-width: 1200px){.forms-container[_ngcontent-%COMP%]{flex-direction:column;flex-wrap:wrap}.form-matrix[_ngcontent-%COMP%], .form-ordinates[_ngcontent-%COMP%]{flex-basis:auto}}.blink_me[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_blinker 1s linear infinite;margin-top:5%}@keyframes _ngcontent-%COMP%_blinker{50%{opacity:0}}.solution_elements[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:flex-start}.floating-preview[_ngcontent-%COMP%]{position:absolute;background-color:#ffff00e6;color:#000;padding:10px 20px;border-radius:10px;font-size:1.5em;font-weight:700;text-align:center;box-shadow:0 4px 10px #0003;transition:opacity .3s ease-in-out;opacity:1;z-index:1000;max-width:200px}.floating-preview.hidden[_ngcontent-%COMP%]{opacity:0}@media (max-width: 768px){.floating-preview[_ngcontent-%COMP%]{font-size:1.2em;padding:8px 15px}}\"]\n    });\n  }\n  return MatrixComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}