{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.csrfToken = null;\n    this.apiUrl = environment.apiUrl;\n    this.apiAnotherUrl = environment.apiAnotherUrl;\n    this.apiOrdinatesUrl = environment.apiOrdinatesUrl;\n  }\n  //retrive CSRF token\n  fetchCsrfToken() {\n    if (this.csrfToken) {\n      return of(this.csrfToken); // 'of' is from rxjs\n    } else {\n      // Ensure this URL is correct and points to your Django endpoint for CSRF token retrieval\n      return this.http.get(`${environment.apiUrl}csrf/`).pipe(map(response => {\n        this.csrfToken = response.csrfToken;\n        return this.csrfToken;\n      }), catchError(error => {\n        console.error('Error fetching CSRF token', error);\n        return throwError(() => new Error('Error fetching CSRF token'));\n      }));\n    }\n  }\n  getSolverData() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  postMatrixData(matrixData) {\n    return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n      const headers = new HttpHeaders({\n        'X-CSRFToken': csrfToken\n      });\n      return this.http.post(this.apiUrl, matrixData, {\n        headers\n      });\n    }));\n  }\n  postDegreeData(degreeData) {\n    return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n      const headers = new HttpHeaders({\n        'X-CSRFToken': csrfToken\n      });\n      return this.http.post(this.apiAnotherUrl, degreeData, {\n        headers\n      });\n    }));\n  }\n  postOrdinatesData(ordinatesData) {\n    return this.fetchCsrfToken().pipe(switchMap(csrfToken => {\n      const headers = new HttpHeaders({\n        'X-CSRFToken': csrfToken\n      });\n      return this.http.post(this.apiOrdinatesUrl, ordinatesData, {\n        headers\n      });\n    }));\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","of","catchError","map","switchMap","environment","ApiService","constructor","http","csrfToken","apiUrl","apiAnotherUrl","apiOrdinatesUrl","fetchCsrfToken","get","pipe","response","error","console","Error","getSolverData","postMatrixData","matrixData","headers","post","postDegreeData","degreeData","postOrdinatesData","ordinatesData","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\matem\\Documents\\Applications\\Python\\equation_solver\\calkulator_frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private csrfToken: string | null = null;\n\n  apiUrl = environment.apiUrl;\n  apiAnotherUrl = environment.apiAnotherUrl;\n  apiOrdinatesUrl = environment.apiOrdinatesUrl;\n\n  constructor(private http: HttpClient) { }\n\n  //retrive CSRF token\n  private fetchCsrfToken(): Observable<string> {\n    if (this.csrfToken) {\n      return of(this.csrfToken); // 'of' is from rxjs\n    } else {\n      // Ensure this URL is correct and points to your Django endpoint for CSRF token retrieval\n      return this.http.get<{ csrfToken: string }>(`${environment.apiUrl}csrf/`).pipe(\n        map(response => {\n          this.csrfToken = response.csrfToken;\n          return this.csrfToken;\n        }),\n        catchError(error => {\n          console.error('Error fetching CSRF token', error);\n          return throwError(() => new Error('Error fetching CSRF token'));\n        })\n      );\n    }\n  }\n\n\n  getSolverData() {\n    return this.http.get<any>(`${this.apiUrl}`);\n  }\n\n  postMatrixData(matrixData: any): Observable<any> {\n    return this.fetchCsrfToken().pipe(\n      switchMap(csrfToken => {\n        const headers = new HttpHeaders({ 'X-CSRFToken': csrfToken });\n        return this.http.post<any>(this.apiUrl, matrixData, { headers });\n      })\n    );\n  }\n\n  postDegreeData(degreeData: any): Observable<any> {\n    return this.fetchCsrfToken().pipe(\n      switchMap(csrfToken => {\n        const headers = new HttpHeaders({ 'X-CSRFToken': csrfToken });\n        return this.http.post<any>(this.apiAnotherUrl, degreeData, { headers });\n      })\n    );\n  }\n\n  postOrdinatesData(ordinatesData: any): Observable<any> {\n    return this.fetchCsrfToken().pipe(\n      switchMap(csrfToken => {\n        const headers = new HttpHeaders({ 'X-CSRFToken': csrfToken });\n        return this.http.post<any>(this.apiOrdinatesUrl, ordinatesData, { headers });\n      })\n    );\n  }\n\n\n//   postMatrixData(matrixData: any) {\n//     return this.http.post<any>( this.apiUrl, matrixData );\n//   }\n\n//   postDegreeData(degreeData: any) {\n//      return this.http.post<any> ( this.apiAnotherUrl, degreeData ); //(`${this.apiUrl}another_post/`, degreeData);\n//   }\n\n//   postOrdinatesData(ordinatesData: any) {\n//     return this.http.post<any> ( this.apiOrdinatesUrl, ordinatesData ); //(`${this.apiUrl}ordinates/`, ordinatesData);\n//  }\n\n  \n  \n}"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACjD,SAASC,UAAU,EAAEC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AAC3D,SAASC,WAAW,QAAQ,6BAA6B;;;AAMzD,OAAM,MAAOC,UAAU;EAOrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,SAAS,GAAkB,IAAI;IAEvC,KAAAC,MAAM,GAAGL,WAAW,CAACK,MAAM;IAC3B,KAAAC,aAAa,GAAGN,WAAW,CAACM,aAAa;IACzC,KAAAC,eAAe,GAAGP,WAAW,CAACO,eAAe;EAEL;EAExC;EACQC,cAAcA,CAAA;IACpB,IAAI,IAAI,CAACJ,SAAS,EAAE;MAClB,OAAOR,EAAE,CAAC,IAAI,CAACQ,SAAS,CAAC,CAAC,CAAC;KAC5B,MAAM;MACL;MACA,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAAwB,GAAGT,WAAW,CAACK,MAAM,OAAO,CAAC,CAACK,IAAI,CAC5EZ,GAAG,CAACa,QAAQ,IAAG;QACb,IAAI,CAACP,SAAS,GAAGO,QAAQ,CAACP,SAAS;QACnC,OAAO,IAAI,CAACA,SAAS;MACvB,CAAC,CAAC,EACFP,UAAU,CAACe,KAAK,IAAG;QACjBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,OAAOjB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,2BAA2B,CAAC,CAAC;MACjE,CAAC,CAAC,CACH;;EAEL;EAGAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACZ,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACJ,MAAM,EAAE,CAAC;EAC7C;EAEAW,cAAcA,CAACC,UAAe;IAC5B,OAAO,IAAI,CAACT,cAAc,EAAE,CAACE,IAAI,CAC/BX,SAAS,CAACK,SAAS,IAAG;MACpB,MAAMc,OAAO,GAAG,IAAIxB,WAAW,CAAC;QAAE,aAAa,EAAEU;MAAS,CAAE,CAAC;MAC7D,OAAO,IAAI,CAACD,IAAI,CAACgB,IAAI,CAAM,IAAI,CAACd,MAAM,EAAEY,UAAU,EAAE;QAAEC;MAAO,CAAE,CAAC;IAClE,CAAC,CAAC,CACH;EACH;EAEAE,cAAcA,CAACC,UAAe;IAC5B,OAAO,IAAI,CAACb,cAAc,EAAE,CAACE,IAAI,CAC/BX,SAAS,CAACK,SAAS,IAAG;MACpB,MAAMc,OAAO,GAAG,IAAIxB,WAAW,CAAC;QAAE,aAAa,EAAEU;MAAS,CAAE,CAAC;MAC7D,OAAO,IAAI,CAACD,IAAI,CAACgB,IAAI,CAAM,IAAI,CAACb,aAAa,EAAEe,UAAU,EAAE;QAAEH;MAAO,CAAE,CAAC;IACzE,CAAC,CAAC,CACH;EACH;EAEAI,iBAAiBA,CAACC,aAAkB;IAClC,OAAO,IAAI,CAACf,cAAc,EAAE,CAACE,IAAI,CAC/BX,SAAS,CAACK,SAAS,IAAG;MACpB,MAAMc,OAAO,GAAG,IAAIxB,WAAW,CAAC;QAAE,aAAa,EAAEU;MAAS,CAAE,CAAC;MAC7D,OAAO,IAAI,CAACD,IAAI,CAACgB,IAAI,CAAM,IAAI,CAACZ,eAAe,EAAEgB,aAAa,EAAE;QAAEL;MAAO,CAAE,CAAC;IAC9E,CAAC,CAAC,CACH;EACH;EAAC,QAAAM,CAAA,G;qBA1DUvB,UAAU,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAV5B,UAAU;IAAA6B,OAAA,EAAV7B,UAAU,CAAA8B,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}